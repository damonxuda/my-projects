{"ast":null,"code":"// src/utils/authHelpers.js\n\n/**\n * 验证邮箱格式\n * @param {string} email - 邮箱地址\n * @returns {boolean} 是否为有效邮箱\n */\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * 验证密码强度\n * @param {string} password - 密码\n * @returns {object} 验证结果和消息\n */\nexport const validatePassword = password => {\n  const errors = [];\n  if (password.length < 6) {\n    errors.push('密码至少需要6个字符');\n  }\n  if (!/[A-Za-z]/.test(password)) {\n    errors.push('密码需要包含字母');\n  }\n  if (!/\\d/.test(password)) {\n    errors.push('密码需要包含数字');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * 格式化认证错误消息\n * @param {object} error - Supabase错误对象\n * @returns {string} 用户友好的错误消息\n */\nexport const formatAuthError = error => {\n  if (!error) return '';\n  const errorMessages = {\n    'Invalid login credentials': '邮箱或密码错误',\n    'Email not confirmed': '请先验证您的邮箱',\n    'User already registered': '该邮箱已被注册',\n    'Password should be at least 6 characters': '密码至少需要6个字符',\n    'Unable to validate email address: invalid format': '邮箱格式无效',\n    'Email rate limit exceeded': '邮件发送过于频繁，请稍后再试',\n    'Invalid email or password': '邮箱或密码错误',\n    'Email link is invalid or has expired': '邮箱链接无效或已过期',\n    'Token has expired or is invalid': '链接已过期，请重新请求',\n    'New password should be different from the old password': '新密码不能与旧密码相同'\n  };\n  return errorMessages[error.message] || error.message || '发生未知错误';\n};\n\n/**\n * 检查用户权限\n * @param {object} userProfile - 用户档案\n * @param {string} requiredRole - 需要的角色\n * @returns {boolean} 是否有权限\n */\nexport const hasPermission = (userProfile, requiredRole = 'approved') => {\n  if (!userProfile) return false;\n  const roleHierarchy = {\n    'pending': 0,\n    'approved': 1,\n    'admin': 2\n  };\n  const userLevel = roleHierarchy[userProfile.status] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n  return userLevel >= requiredLevel;\n};\n\n/**\n * 生成安全的重定向URL\n * @param {string} baseUrl - 基础URL\n * @param {string} path - 路径\n * @returns {string} 完整的重定向URL\n */\nexport const generateRedirectUrl = (baseUrl, path) => {\n  const url = new URL(baseUrl);\n  url.pathname = path;\n  return url.toString();\n};\n\n/**\n * 从URL中提取认证参数\n * @returns {object} 认证相关的URL参数\n */\nexport const extractAuthParams = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const hash = new URLSearchParams(window.location.hash.substring(1));\n  return {\n    access_token: urlParams.get('access_token') || hash.get('access_token'),\n    refresh_token: urlParams.get('refresh_token') || hash.get('refresh_token'),\n    error: urlParams.get('error') || hash.get('error'),\n    error_description: urlParams.get('error_description') || hash.get('error_description')\n  };\n};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","validatePassword","password","errors","length","push","isValid","formatAuthError","error","errorMessages","message","hasPermission","userProfile","requiredRole","roleHierarchy","userLevel","status","requiredLevel","generateRedirectUrl","baseUrl","path","url","URL","pathname","toString","extractAuthParams","urlParams","URLSearchParams","window","location","search","hash","substring","access_token","get","refresh_token","error_description"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/src/utils/authHelpers.js"],"sourcesContent":["// src/utils/authHelpers.js\n\n/**\n * 验证邮箱格式\n * @param {string} email - 邮箱地址\n * @returns {boolean} 是否为有效邮箱\n */\nexport const isValidEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * 验证密码强度\n * @param {string} password - 密码\n * @returns {object} 验证结果和消息\n */\nexport const validatePassword = (password) => {\n  const errors = [];\n  \n  if (password.length < 6) {\n    errors.push('密码至少需要6个字符');\n  }\n  \n  if (!/[A-Za-z]/.test(password)) {\n    errors.push('密码需要包含字母');\n  }\n  \n  if (!/\\d/.test(password)) {\n    errors.push('密码需要包含数字');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * 格式化认证错误消息\n * @param {object} error - Supabase错误对象\n * @returns {string} 用户友好的错误消息\n */\nexport const formatAuthError = (error) => {\n  if (!error) return '';\n\n  const errorMessages = {\n    'Invalid login credentials': '邮箱或密码错误',\n    'Email not confirmed': '请先验证您的邮箱',\n    'User already registered': '该邮箱已被注册',\n    'Password should be at least 6 characters': '密码至少需要6个字符',\n    'Unable to validate email address: invalid format': '邮箱格式无效',\n    'Email rate limit exceeded': '邮件发送过于频繁，请稍后再试',\n    'Invalid email or password': '邮箱或密码错误',\n    'Email link is invalid or has expired': '邮箱链接无效或已过期',\n    'Token has expired or is invalid': '链接已过期，请重新请求',\n    'New password should be different from the old password': '新密码不能与旧密码相同'\n  };\n\n  return errorMessages[error.message] || error.message || '发生未知错误';\n};\n\n/**\n * 检查用户权限\n * @param {object} userProfile - 用户档案\n * @param {string} requiredRole - 需要的角色\n * @returns {boolean} 是否有权限\n */\nexport const hasPermission = (userProfile, requiredRole = 'approved') => {\n  if (!userProfile) return false;\n\n  const roleHierarchy = {\n    'pending': 0,\n    'approved': 1,\n    'admin': 2\n  };\n\n  const userLevel = roleHierarchy[userProfile.status] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n\n  return userLevel >= requiredLevel;\n};\n\n/**\n * 生成安全的重定向URL\n * @param {string} baseUrl - 基础URL\n * @param {string} path - 路径\n * @returns {string} 完整的重定向URL\n */\nexport const generateRedirectUrl = (baseUrl, path) => {\n  const url = new URL(baseUrl);\n  url.pathname = path;\n  return url.toString();\n};\n\n/**\n * 从URL中提取认证参数\n * @returns {object} 认证相关的URL参数\n */\nexport const extractAuthParams = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const hash = new URLSearchParams(window.location.hash.substring(1));\n  \n  return {\n    access_token: urlParams.get('access_token') || hash.get('access_token'),\n    refresh_token: urlParams.get('refresh_token') || hash.get('refresh_token'),\n    error: urlParams.get('error') || hash.get('error'),\n    error_description: urlParams.get('error_description') || hash.get('error_description'),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}