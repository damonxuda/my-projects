{"ast":null,"code":"var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};import{_generateLinkResponse,_noResolveJsonResponse,_request,_userResponse}from'./lib/fetch';import{resolveFetch,validateUUID}from'./lib/helpers';import{SIGN_OUT_SCOPES}from'./lib/types';import{isAuthError}from'./lib/errors';export default class GoTrueAdminApi{constructor(_ref){let{url='',headers={},fetch}=_ref;this.url=url;this.headers=headers;this.fetch=resolveFetch(fetch);this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)};}/**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     * @param scope The logout sope.\n     */async signOut(jwt){let scope=arguments.length>1&&arguments[1]!==undefined?arguments[1]:SIGN_OUT_SCOPES[0];if(SIGN_OUT_SCOPES.indexOf(scope)<0){throw new Error(\"@supabase/auth-js: Parameter scope must be one of \".concat(SIGN_OUT_SCOPES.join(', ')));}try{await _request(this.fetch,'POST',\"\".concat(this.url,\"/logout?scope=\").concat(scope),{headers:this.headers,jwt,noResolveJson:true});return{data:null,error:null};}catch(error){if(isAuthError(error)){return{data:null,error};}throw error;}}/**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options Additional options to be included when inviting.\n     */async inviteUserByEmail(email){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{return await _request(this.fetch,'POST',\"\".concat(this.url,\"/invite\"),{body:{email,data:options.data},headers:this.headers,redirectTo:options.redirectTo,xform:_userResponse});}catch(error){if(isAuthError(error)){return{data:{user:null},error};}throw error;}}/**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */async generateLink(params){try{const{options}=params,rest=__rest(params,[\"options\"]);const body=Object.assign(Object.assign({},rest),options);if('newEmail'in rest){// replace newEmail with new_email in request body\nbody.new_email=rest===null||rest===void 0?void 0:rest.newEmail;delete body['newEmail'];}return await _request(this.fetch,'POST',\"\".concat(this.url,\"/admin/generate_link\"),{body:body,headers:this.headers,xform:_generateLinkResponse,redirectTo:options===null||options===void 0?void 0:options.redirectTo});}catch(error){if(isAuthError(error)){return{data:{properties:null,user:null},error};}throw error;}}// User Admin API\n/**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */async createUser(attributes){try{return await _request(this.fetch,'POST',\"\".concat(this.url,\"/admin/users\"),{body:attributes,headers:this.headers,xform:_userResponse});}catch(error){if(isAuthError(error)){return{data:{user:null},error};}throw error;}}/**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n     */async listUsers(params){var _a,_b,_c,_d,_e,_f,_g;try{const pagination={nextPage:null,lastPage:0,total:0};const response=await _request(this.fetch,'GET',\"\".concat(this.url,\"/admin/users\"),{headers:this.headers,noResolveJson:true,query:{page:(_b=(_a=params===null||params===void 0?void 0:params.page)===null||_a===void 0?void 0:_a.toString())!==null&&_b!==void 0?_b:'',per_page:(_d=(_c=params===null||params===void 0?void 0:params.perPage)===null||_c===void 0?void 0:_c.toString())!==null&&_d!==void 0?_d:''},xform:_noResolveJsonResponse});if(response.error)throw response.error;const users=await response.json();const total=(_e=response.headers.get('x-total-count'))!==null&&_e!==void 0?_e:0;const links=(_g=(_f=response.headers.get('link'))===null||_f===void 0?void 0:_f.split(','))!==null&&_g!==void 0?_g:[];if(links.length>0){links.forEach(link=>{const page=parseInt(link.split(';')[0].split('=')[1].substring(0,1));const rel=JSON.parse(link.split(';')[1].split('=')[1]);pagination[\"\".concat(rel,\"Page\")]=page;});pagination.total=parseInt(total);}return{data:Object.assign(Object.assign({},users),pagination),error:null};}catch(error){if(isAuthError(error)){return{data:{users:[]},error};}throw error;}}/**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */async getUserById(uid){validateUUID(uid);try{return await _request(this.fetch,'GET',\"\".concat(this.url,\"/admin/users/\").concat(uid),{headers:this.headers,xform:_userResponse});}catch(error){if(isAuthError(error)){return{data:{user:null},error};}throw error;}}/**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */async updateUserById(uid,attributes){validateUUID(uid);try{return await _request(this.fetch,'PUT',\"\".concat(this.url,\"/admin/users/\").concat(uid),{body:attributes,headers:this.headers,xform:_userResponse});}catch(error){if(isAuthError(error)){return{data:{user:null},error};}throw error;}}/**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\n     * Defaults to false for backward compatibility.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */async deleteUser(id){let shouldSoftDelete=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;validateUUID(id);try{return await _request(this.fetch,'DELETE',\"\".concat(this.url,\"/admin/users/\").concat(id),{headers:this.headers,body:{should_soft_delete:shouldSoftDelete},xform:_userResponse});}catch(error){if(isAuthError(error)){return{data:{user:null},error};}throw error;}}async _listFactors(params){validateUUID(params.userId);try{const{data,error}=await _request(this.fetch,'GET',\"\".concat(this.url,\"/admin/users/\").concat(params.userId,\"/factors\"),{headers:this.headers,xform:factors=>{return{data:{factors},error:null};}});return{data,error};}catch(error){if(isAuthError(error)){return{data:null,error};}throw error;}}async _deleteFactor(params){validateUUID(params.userId);validateUUID(params.id);try{const data=await _request(this.fetch,'DELETE',\"\".concat(this.url,\"/admin/users/\").concat(params.userId,\"/factors/\").concat(params.id),{headers:this.headers});return{data,error:null};}catch(error){if(isAuthError(error)){return{data:null,error};}throw error;}}}","map":{"version":3,"names":["_generateLinkResponse","_noResolveJsonResponse","_request","_userResponse","resolveFetch","validateUUID","SIGN_OUT_SCOPES","isAuthError","GoTrueAdminApi","constructor","_ref","url","headers","fetch","mfa","listFactors","_listFactors","bind","deleteFactor","_deleteFactor","signOut","jwt","scope","arguments","length","undefined","indexOf","Error","concat","join","noResolveJson","data","error","inviteUserByEmail","email","options","body","redirectTo","xform","user","generateLink","params","rest","__rest","Object","assign","new_email","newEmail","properties","createUser","attributes","listUsers","pagination","nextPage","lastPage","total","response","query","page","_b","_a","toString","per_page","_d","_c","perPage","users","json","_e","get","links","_g","_f","split","forEach","link","parseInt","substring","rel","JSON","parse","getUserById","uid","updateUserById","deleteUser","id","shouldSoftDelete","should_soft_delete","userId","factors"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/auth-js/src/GoTrueAdminApi.ts"],"sourcesContent":["import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch, validateUUID } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n  SIGN_OUT_SCOPES,\n  SignOutScope,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   * @param scope The logout sope.\n   */\n  async signOut(\n    jwt: string,\n    scope: SignOutScope = SIGN_OUT_SCOPES[0]\n  ): Promise<{ data: null; error: AuthError | null }> {\n    if (SIGN_OUT_SCOPES.indexOf(scope) < 0) {\n      throw new Error(\n        `@supabase/auth-js: Parameter scope must be one of ${SIGN_OUT_SCOPES.join(', ')}`\n      )\n    }\n\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      /** A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column. */\n      data?: object\n\n      /** The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. */\n      redirectTo?: string\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    validateUUID(uid)\n\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    validateUUID(uid)\n\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\n    validateUUID(id)\n\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete,\n        },\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    validateUUID(params.userId)\n\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    validateUUID(params.userId)\n    validateUUID(params.id)\n\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}