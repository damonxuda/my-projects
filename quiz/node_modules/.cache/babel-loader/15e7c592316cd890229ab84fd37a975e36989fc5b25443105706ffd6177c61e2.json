{"ast":null,"code":"var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator[\"throw\"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};import{FunctionsClient}from'@supabase/functions-js';import{PostgrestClient}from'@supabase/postgrest-js';import{RealtimeClient}from'@supabase/realtime-js';import{StorageClient as SupabaseStorageClient}from'@supabase/storage-js';import{DEFAULT_GLOBAL_OPTIONS,DEFAULT_DB_OPTIONS,DEFAULT_AUTH_OPTIONS,DEFAULT_REALTIME_OPTIONS}from'./lib/constants';import{fetchWithAuth}from'./lib/fetch';import{ensureTrailingSlash,applySettingDefaults}from'./lib/helpers';import{SupabaseAuthClient}from'./lib/SupabaseAuthClient';/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */export default class SupabaseClient{/**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.storage Options passed along to the storage-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */constructor(supabaseUrl,supabaseKey,options){var _a,_b,_c;this.supabaseUrl=supabaseUrl;this.supabaseKey=supabaseKey;if(!supabaseUrl)throw new Error('supabaseUrl is required.');if(!supabaseKey)throw new Error('supabaseKey is required.');const _supabaseUrl=ensureTrailingSlash(supabaseUrl);const baseUrl=new URL(_supabaseUrl);this.realtimeUrl=new URL('realtime/v1',baseUrl);this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace('http','ws');this.authUrl=new URL('auth/v1',baseUrl);this.storageUrl=new URL('storage/v1',baseUrl);this.functionsUrl=new URL('functions/v1',baseUrl);// default storage key uses the supabase project ref as a namespace\nconst defaultStorageKey=`sb-${baseUrl.hostname.split('.')[0]}-auth-token`;const DEFAULTS={db:DEFAULT_DB_OPTIONS,realtime:DEFAULT_REALTIME_OPTIONS,auth:Object.assign(Object.assign({},DEFAULT_AUTH_OPTIONS),{storageKey:defaultStorageKey}),global:DEFAULT_GLOBAL_OPTIONS};const settings=applySettingDefaults(options!==null&&options!==void 0?options:{},DEFAULTS);this.storageKey=(_a=settings.auth.storageKey)!==null&&_a!==void 0?_a:'';this.headers=(_b=settings.global.headers)!==null&&_b!==void 0?_b:{};if(!settings.accessToken){this.auth=this._initSupabaseAuthClient((_c=settings.auth)!==null&&_c!==void 0?_c:{},this.headers,settings.global.fetch);}else{this.accessToken=settings.accessToken;this.auth=new Proxy({},{get:(_,prop)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);}});}this.fetch=fetchWithAuth(supabaseKey,this._getAccessToken.bind(this),settings.global.fetch);this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},settings.realtime));this.rest=new PostgrestClient(new URL('rest/v1',baseUrl).href,{headers:this.headers,schema:settings.db.schema,fetch:this.fetch});this.storage=new SupabaseStorageClient(this.storageUrl.href,this.headers,this.fetch,options===null||options===void 0?void 0:options.storage);if(!settings.accessToken){this._listenForAuthEvents();}}/**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */get functions(){return new FunctionsClient(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch});}/**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */from(relation){return this.rest.from(relation);}// NOTE: signatures must be kept in sync with PostgrestClient.schema\n/**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */schema(schema){return this.rest.schema(schema);}// NOTE: signatures must be kept in sync with PostgrestClient.rpc\n/**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */rpc(fn){let args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this.rest.rpc(fn,args,options);}/**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */channel(name){let opts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{config:{}};return this.realtime.channel(name,opts);}/**\n     * Returns all Realtime channels.\n     */getChannels(){return this.realtime.getChannels();}/**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */removeChannel(channel){return this.realtime.removeChannel(channel);}/**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */removeAllChannels(){return this.realtime.removeAllChannels();}_getAccessToken(){var _a,_b;return __awaiter(this,void 0,void 0,function*(){if(this.accessToken){return yield this.accessToken();}const{data}=yield this.auth.getSession();return(_b=(_a=data.session)===null||_a===void 0?void 0:_a.access_token)!==null&&_b!==void 0?_b:this.supabaseKey;});}_initSupabaseAuthClient(_ref,headers,fetch){let{autoRefreshToken,persistSession,detectSessionInUrl,storage,storageKey,flowType,lock,debug}=_ref;const authHeaders={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new SupabaseAuthClient({url:this.authUrl.href,headers:Object.assign(Object.assign({},authHeaders),headers),storageKey:storageKey,autoRefreshToken,persistSession,detectSessionInUrl,storage,flowType,lock,debug,fetch,// auth checks if there is a custom authorizaiton header using this flag\n// so it knows whether to return an error when getUser is called with no session\nhasCustomAuthorizationHeader:'Authorization'in this.headers});}_initRealtimeClient(options){return new RealtimeClient(this.realtimeUrl.href,Object.assign(Object.assign({},options),{params:Object.assign({apikey:this.supabaseKey},options===null||options===void 0?void 0:options.params)}));}_listenForAuthEvents(){let data=this.auth.onAuthStateChange((event,session)=>{this._handleTokenChanged(event,'CLIENT',session===null||session===void 0?void 0:session.access_token);});return data;}_handleTokenChanged(event,source,token){if((event==='TOKEN_REFRESHED'||event==='SIGNED_IN')&&this.changedAccessToken!==token){this.changedAccessToken=token;}else if(event==='SIGNED_OUT'){this.realtime.setAuth();if(source=='STORAGE')this.auth.signOut();this.changedAccessToken=undefined;}}}","map":{"version":3,"names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","fetchWithAuth","ensureTrailingSlash","applySettingDefaults","SupabaseAuthClient","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","baseUrl","URL","realtimeUrl","protocol","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_a","headers","_b","accessToken","_initSupabaseAuthClient","_c","fetch","Proxy","get","_","prop","String","_getAccessToken","bind","_initRealtimeClient","rest","href","schema","storage","_listenForAuthEvents","functions","customFetch","from","relation","rpc","fn","args","arguments","length","undefined","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","_ref","autoRefreshToken","persistSession","detectSessionInUrl","flowType","lock","debug","authHeaders","Authorization","apikey","url","hasCustomAuthorizationHeader","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/auth-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport {\n  DEFAULT_GLOBAL_OPTIONS,\n  DEFAULT_DB_OPTIONS,\n  DEFAULT_AUTH_OPTIONS,\n  DEFAULT_REALTIME_OPTIONS,\n} from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { ensureTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  storage: SupabaseStorageClient\n\n  protected realtimeUrl: URL\n  protected authUrl: URL\n  protected storageUrl: URL\n  protected functionsUrl: URL\n  protected rest: PostgrestClient<Database, SchemaName, Schema>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n  protected accessToken?: () => Promise<string | null>\n\n  protected headers: Record<string, string>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.storage Options passed along to the storage-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = ensureTrailingSlash(supabaseUrl)\n    const baseUrl = new URL(_supabaseUrl)\n\n    this.realtimeUrl = new URL('realtime/v1', baseUrl)\n    this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws')\n    this.authUrl = new URL('auth/v1', baseUrl)\n    this.storageUrl = new URL('storage/v1', baseUrl)\n    this.functionsUrl = new URL('functions/v1', baseUrl)\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth.storageKey ?? ''\n    this.headers = settings.global.headers ?? {}\n\n    if (!settings.accessToken) {\n      this.auth = this._initSupabaseAuthClient(\n        settings.auth ?? {},\n        this.headers,\n        settings.global.fetch\n      )\n    } else {\n      this.accessToken = settings.accessToken\n\n      this.auth = new Proxy<SupabaseAuthClient>({} as any, {\n        get: (_, prop) => {\n          throw new Error(\n            `@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(\n              prop\n            )} is not possible`\n          )\n        },\n      })\n    }\n\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch)\n    this.realtime = this._initRealtimeClient({\n      headers: this.headers,\n      accessToken: this._getAccessToken.bind(this),\n      ...settings.realtime,\n    })\n    this.rest = new PostgrestClient(new URL('rest/v1', baseUrl).href, {\n      headers: this.headers,\n      schema: settings.db.schema,\n      fetch: this.fetch,\n    })\n\n    this.storage = new SupabaseStorageClient(\n      this.storageUrl.href,\n      this.headers,\n      this.fetch,\n      options?.storage\n    )\n\n    if (!settings.accessToken) {\n      this._listenForAuthEvents()\n    }\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions(): FunctionsClient {\n    return new FunctionsClient(this.functionsUrl.href, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.from\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    return this.rest.from(relation)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    options: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns'],\n    FnName,\n    null\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    if (this.accessToken) {\n      return await this.accessToken()\n    }\n\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? this.supabaseKey\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      lock,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl.href,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      lock,\n      debug,\n      fetch,\n      // auth checks if there is a custom authorizaiton header using this flag\n      // so it knows whether to return an error when getUser is called with no session\n      hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl.href, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      this.realtime.setAuth()\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}