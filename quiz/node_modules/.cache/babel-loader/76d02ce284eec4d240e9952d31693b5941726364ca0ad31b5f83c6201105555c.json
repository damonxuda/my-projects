{"ast":null,"code":"// Real Supabase Database Service\nimport { supabase, SUPABASE_CONFIG } from './SupabaseConfig.js';\nclass DatabaseService {\n  constructor() {\n    this.supabase = supabase;\n    this.tables = SUPABASE_CONFIG.tables;\n  }\n\n  // ===============================\n  // 题目相关操作\n  // ===============================\n\n  async addQuestion(questionData) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.questions).insert([{\n        title: questionData.title,\n        content: questionData.content,\n        type: questionData.type || 'multiple_choice',\n        options: questionData.options,\n        correct_answer: questionData.correctAnswer,\n        explanation: questionData.explanation,\n        difficulty: questionData.difficulty || 1,\n        is_active: true\n      }]).select().single();\n      if (error) throw error;\n\n      // 如果有标签，添加标签关联\n      if (questionData.tags && questionData.tags.length > 0) {\n        await this.addQuestionTags(data.id, questionData.tags);\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error adding question:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getQuestions(filters = {}) {\n    try {\n      let query = this.supabase.from(this.tables.questions).select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `).eq('is_active', true).order('created_at', {\n        ascending: false\n      });\n\n      // 应用过滤器\n      if (filters.difficulty) {\n        query = query.eq('difficulty', filters.difficulty);\n      }\n      if (filters.type) {\n        query = query.eq('type', filters.type);\n      }\n      if (filters.search) {\n        query = query.or(`title.ilike.%${filters.search}%,content.ilike.%${filters.search}%`);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n\n      // 格式化数据，将标签扁平化\n      const formattedData = data.map(question => {\n        var _question$question_ta;\n        return {\n          ...question,\n          tags: ((_question$question_ta = question.question_tags) === null || _question$question_ta === void 0 ? void 0 : _question$question_ta.map(qt => qt.tags)) || []\n        };\n      });\n      return {\n        success: true,\n        data: formattedData\n      };\n    } catch (error) {\n      console.error('Error getting questions:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getQuestionById(id) {\n    try {\n      var _data$question_tags;\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.questions).select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `).eq('id', id).eq('is_active', true).single();\n      if (error) throw error;\n\n      // 格式化标签\n      const formattedData = {\n        ...data,\n        tags: ((_data$question_tags = data.question_tags) === null || _data$question_tags === void 0 ? void 0 : _data$question_tags.map(qt => qt.tags)) || []\n      };\n      return {\n        success: true,\n        data: formattedData\n      };\n    } catch (error) {\n      console.error('Error getting question:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async updateQuestion(id, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.questions).update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      }).eq('id', id).select().single();\n      if (error) throw error;\n\n      // 如果更新了标签，重新设置标签关联\n      if (updates.tags !== undefined) {\n        await this.updateQuestionTags(id, updates.tags);\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error updating question:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async deleteQuestion(id) {\n    try {\n      const {\n        error\n      } = await this.supabase.from(this.tables.questions).update({\n        is_active: false\n      }) // 软删除\n      .eq('id', id);\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting question:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // ===============================\n  // 标签相关操作\n  // ===============================\n\n  async getTags() {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.tags).select('*').order('name');\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error getting tags:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async addTag(tagData) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.tags).insert([{\n        name: tagData.name,\n        color: tagData.color || '#3B82F6',\n        description: tagData.description\n      }]).select().single();\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error adding tag:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async addQuestionTags(questionId, tagIds) {\n    try {\n      const tagAssociations = tagIds.map(tagId => ({\n        question_id: questionId,\n        tag_id: tagId\n      }));\n      const {\n        error\n      } = await this.supabase.from(this.tables.question_tags).insert(tagAssociations);\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error adding question tags:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async updateQuestionTags(questionId, tagIds) {\n    try {\n      // 先删除现有关联\n      await this.supabase.from(this.tables.question_tags).delete().eq('question_id', questionId);\n\n      // 如果有新标签，添加新关联\n      if (tagIds && tagIds.length > 0) {\n        await this.addQuestionTags(questionId, tagIds);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating question tags:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // ===============================\n  // 答题记录相关操作\n  // ===============================\n\n  async recordAttempt(attemptData) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.attempts).insert([{\n        question_id: attemptData.questionId,\n        user_answer: attemptData.userAnswer,\n        is_correct: attemptData.isCorrect,\n        response_time: attemptData.responseTime,\n        user_id: attemptData.userId,\n        session_id: attemptData.sessionId\n      }]).select().single();\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error recording attempt:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getAttempts(filters = {}) {\n    try {\n      let query = this.supabase.from(this.tables.attempts).select(`\n          *,\n          questions (\n            id,\n            title,\n            difficulty\n          )\n        `).order('attempted_at', {\n        ascending: false\n      });\n      if (filters.userId) {\n        query = query.eq('user_id', filters.userId);\n      }\n      if (filters.sessionId) {\n        query = query.eq('session_id', filters.sessionId);\n      }\n      if (filters.questionId) {\n        query = query.eq('question_id', filters.questionId);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Error getting attempts:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // ===============================\n  // 统计相关操作\n  // ===============================\n\n  async getStatistics(userId = null, sessionId = null) {\n    try {\n      let filter = {};\n      if (userId) filter.user_id = userId;\n      if (sessionId) filter.session_id = sessionId;\n      const {\n        data: attempts,\n        error\n      } = await this.supabase.from(this.tables.attempts).select('*').match(filter);\n      if (error) throw error;\n      const stats = {\n        totalQuestions: attempts.length,\n        correctAnswers: attempts.filter(a => a.is_correct).length,\n        averageTime: attempts.length > 0 ? attempts.reduce((sum, a) => sum + (a.response_time || 0), 0) / attempts.length : 0,\n        accuracy: attempts.length > 0 ? attempts.filter(a => a.is_correct).length / attempts.length * 100 : 0\n      };\n      return {\n        success: true,\n        data: stats\n      };\n    } catch (error) {\n      console.error('Error getting statistics:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // ===============================\n  // 工具方法\n  // ===============================\n\n  async testConnection() {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from(this.tables.questions).select('count(*)').limit(1);\n      if (error) throw error;\n      console.log('✅ Supabase connection successful!');\n      return {\n        success: true,\n        message: 'Database connection successful'\n      };\n    } catch (error) {\n      console.error('❌ Supabase connection failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\n\n// 导出单例实例\nexport default new DatabaseService();","map":{"version":3,"names":["supabase","SUPABASE_CONFIG","DatabaseService","constructor","tables","addQuestion","questionData","data","error","from","questions","insert","title","content","type","options","correct_answer","correctAnswer","explanation","difficulty","is_active","select","single","tags","length","addQuestionTags","id","success","console","message","getQuestions","filters","query","eq","order","ascending","search","or","formattedData","map","question","_question$question_ta","question_tags","qt","getQuestionById","_data$question_tags","updateQuestion","updates","update","updated_at","Date","toISOString","undefined","updateQuestionTags","deleteQuestion","getTags","addTag","tagData","name","color","description","questionId","tagIds","tagAssociations","tagId","question_id","tag_id","delete","recordAttempt","attemptData","attempts","user_answer","userAnswer","is_correct","isCorrect","response_time","responseTime","user_id","userId","session_id","sessionId","getAttempts","getStatistics","filter","match","stats","totalQuestions","correctAnswers","a","averageTime","reduce","sum","accuracy","testConnection","limit","log"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/quiz/src/services/DatabaseService.js"],"sourcesContent":["// Real Supabase Database Service\nimport { supabase, SUPABASE_CONFIG } from './SupabaseConfig.js';\n\nclass DatabaseService {\n  constructor() {\n    this.supabase = supabase;\n    this.tables = SUPABASE_CONFIG.tables;\n  }\n\n  // ===============================\n  // 题目相关操作\n  // ===============================\n  \n  async addQuestion(questionData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .insert([{\n          title: questionData.title,\n          content: questionData.content,\n          type: questionData.type || 'multiple_choice',\n          options: questionData.options,\n          correct_answer: questionData.correctAnswer,\n          explanation: questionData.explanation,\n          difficulty: questionData.difficulty || 1,\n          is_active: true\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      \n      // 如果有标签，添加标签关联\n      if (questionData.tags && questionData.tags.length > 0) {\n        await this.addQuestionTags(data.id, questionData.tags);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error adding question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getQuestions(filters = {}) {\n    try {\n      let query = this.supabase\n        .from(this.tables.questions)\n        .select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `)\n        .eq('is_active', true)\n        .order('created_at', { ascending: false });\n\n      // 应用过滤器\n      if (filters.difficulty) {\n        query = query.eq('difficulty', filters.difficulty);\n      }\n      \n      if (filters.type) {\n        query = query.eq('type', filters.type);\n      }\n\n      if (filters.search) {\n        query = query.or(`title.ilike.%${filters.search}%,content.ilike.%${filters.search}%`);\n      }\n\n      const { data, error } = await query;\n      \n      if (error) throw error;\n\n      // 格式化数据，将标签扁平化\n      const formattedData = data.map(question => ({\n        ...question,\n        tags: question.question_tags?.map(qt => qt.tags) || []\n      }));\n\n      return { success: true, data: formattedData };\n    } catch (error) {\n      console.error('Error getting questions:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getQuestionById(id) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `)\n        .eq('id', id)\n        .eq('is_active', true)\n        .single();\n\n      if (error) throw error;\n\n      // 格式化标签\n      const formattedData = {\n        ...data,\n        tags: data.question_tags?.map(qt => qt.tags) || []\n      };\n\n      return { success: true, data: formattedData };\n    } catch (error) {\n      console.error('Error getting question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async updateQuestion(id, updates) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // 如果更新了标签，重新设置标签关联\n      if (updates.tags !== undefined) {\n        await this.updateQuestionTags(id, updates.tags);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error updating question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async deleteQuestion(id) {\n    try {\n      const { error } = await this.supabase\n        .from(this.tables.questions)\n        .update({ is_active: false })  // 软删除\n        .eq('id', id);\n\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 标签相关操作\n  // ===============================\n\n  async getTags() {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.tags)\n        .select('*')\n        .order('name');\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error getting tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async addTag(tagData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.tags)\n        .insert([{\n          name: tagData.name,\n          color: tagData.color || '#3B82F6',\n          description: tagData.description\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error adding tag:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async addQuestionTags(questionId, tagIds) {\n    try {\n      const tagAssociations = tagIds.map(tagId => ({\n        question_id: questionId,\n        tag_id: tagId\n      }));\n\n      const { error } = await this.supabase\n        .from(this.tables.question_tags)\n        .insert(tagAssociations);\n\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Error adding question tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async updateQuestionTags(questionId, tagIds) {\n    try {\n      // 先删除现有关联\n      await this.supabase\n        .from(this.tables.question_tags)\n        .delete()\n        .eq('question_id', questionId);\n\n      // 如果有新标签，添加新关联\n      if (tagIds && tagIds.length > 0) {\n        await this.addQuestionTags(questionId, tagIds);\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating question tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 答题记录相关操作\n  // ===============================\n\n  async recordAttempt(attemptData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.attempts)\n        .insert([{\n          question_id: attemptData.questionId,\n          user_answer: attemptData.userAnswer,\n          is_correct: attemptData.isCorrect,\n          response_time: attemptData.responseTime,\n          user_id: attemptData.userId,\n          session_id: attemptData.sessionId\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error recording attempt:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getAttempts(filters = {}) {\n    try {\n      let query = this.supabase\n        .from(this.tables.attempts)\n        .select(`\n          *,\n          questions (\n            id,\n            title,\n            difficulty\n          )\n        `)\n        .order('attempted_at', { ascending: false });\n\n      if (filters.userId) {\n        query = query.eq('user_id', filters.userId);\n      }\n\n      if (filters.sessionId) {\n        query = query.eq('session_id', filters.sessionId);\n      }\n\n      if (filters.questionId) {\n        query = query.eq('question_id', filters.questionId);\n      }\n\n      const { data, error } = await query;\n      \n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error getting attempts:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 统计相关操作\n  // ===============================\n\n  async getStatistics(userId = null, sessionId = null) {\n    try {\n      let filter = {};\n      if (userId) filter.user_id = userId;\n      if (sessionId) filter.session_id = sessionId;\n\n      const { data: attempts, error } = await this.supabase\n        .from(this.tables.attempts)\n        .select('*')\n        .match(filter);\n\n      if (error) throw error;\n\n      const stats = {\n        totalQuestions: attempts.length,\n        correctAnswers: attempts.filter(a => a.is_correct).length,\n        averageTime: attempts.length > 0 ? \n          attempts.reduce((sum, a) => sum + (a.response_time || 0), 0) / attempts.length : 0,\n        accuracy: attempts.length > 0 ? \n          (attempts.filter(a => a.is_correct).length / attempts.length) * 100 : 0\n      };\n\n      return { success: true, data: stats };\n    } catch (error) {\n      console.error('Error getting statistics:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 工具方法\n  // ===============================\n\n  async testConnection() {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .select('count(*)')\n        .limit(1);\n\n      if (error) throw error;\n      \n      console.log('✅ Supabase connection successful!');\n      return { success: true, message: 'Database connection successful' };\n    } catch (error) {\n      console.error('❌ Supabase connection failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n}\n\n// 导出单例实例\nexport default new DatabaseService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}