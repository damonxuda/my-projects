{"ast":null,"code":"// src/contexts/AuthProvider.js\nimport React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext({});export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children,supabaseClient,redirectTo=\"\".concat(window.location.origin,\"/reset-password\")}=_ref;const[user,setUser]=useState(null);const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);if(!supabaseClient){throw new Error('AuthProvider requires supabaseClient prop');}useEffect(()=>{// 获取当前用户会话\nconst getSession=async()=>{var _session$user;const{data:{session}}=await supabaseClient.auth.getSession();setUser((_session$user=session===null||session===void 0?void 0:session.user)!==null&&_session$user!==void 0?_session$user:null);if(session!==null&&session!==void 0&&session.user){await fetchUserProfile(session.user.id);}setLoading(false);};getSession();// 监听认证状态变化\nconst{data:{subscription}}=supabaseClient.auth.onAuthStateChange(async(event,session)=>{var _session$user2,_session$user3;console.log('Auth state changed:',event,session===null||session===void 0?void 0:(_session$user2=session.user)===null||_session$user2===void 0?void 0:_session$user2.email);console.log('=== Session user:',session===null||session===void 0?void 0:session.user);// 新增\nsetUser((_session$user3=session===null||session===void 0?void 0:session.user)!==null&&_session$user3!==void 0?_session$user3:null);if(session!==null&&session!==void 0&&session.user){console.log('=== Calling fetchUserProfile for:',session.user.id);// 新增\nawait fetchUserProfile(session.user.id);// 如果是新用户登录且没有 profile，创建一个\nif(event==='SIGNED_IN'){await ensureUserProfile(session.user);}}else{setUserProfile(null);}setLoading(false);});return()=>subscription.unsubscribe();},[supabaseClient]);// 获取用户档案信息\nconst fetchUserProfile=async userId=>{console.log('=== fetchUserProfile called with userId:',userId);console.log('=== supabaseClient:',supabaseClient);try{console.log('=== About to query user_profiles table');console.log('=== Skipping test query, going directly to main query...');// 直接执行业务查询\nconst{data,error}=await supabaseClient.from('user_profiles').select('*').eq('id',userId).single();console.log('=== fetchUserProfile result:',{data,error});if(error&&error.code!=='PGRST116'){// PGRST116 = 没有找到记录\nconsole.error('Error fetching user profile:',error);}else{console.log('=== Setting userProfile to:',data);setUserProfile(data);}}catch(error){console.error('=== fetchUserProfile catch error:',error);console.error('Error fetching user profile:',error);}};// 确保用户有 profile 记录\nconst ensureUserProfile=async user=>{if(!user)return;try{// 先检查是否已存在\nconst{data:existing}=await supabaseClient.from('user_profiles').select('id').eq('id',user.id).single();if(!existing){// 不存在则创建\nconsole.log('Creating user profile for:',user.email);const{data,error}=await supabaseClient.from('user_profiles').insert([{id:user.id,email:user.email,status:'pending',requested_at:new Date().toISOString()}]).select().single();if(error){console.error('Error creating user profile:',error);}else{console.log('User profile created successfully:',data);setUserProfile(data);}}}catch(error){console.error('Error ensuring user profile:',error);}};// 用户注册\nconst signUp=async(email,password)=>{try{console.log('Starting signup for:',email);const{data,error}=await supabaseClient.auth.signUp({email,password});if(error)throw error;// 注册成功后，profile 会在 onAuthStateChange 中创建\nconsole.log('Signup successful:',data);return{data,error:null};}catch(error){console.error('Signup error:',error);return{data:null,error};}};// 用户登录\nconst signIn=async(email,password)=>{try{const{data,error}=await supabaseClient.auth.signInWithPassword({email,password});return{data,error};}catch(error){return{data:null,error};}};// 用户登出\nconst signOut=async()=>{const{error}=await supabaseClient.auth.signOut();return{error};};// 发送密码重置邮件\nconst resetPassword=async email=>{try{const{error}=await supabaseClient.auth.resetPasswordForEmail(email,{redirectTo});return{error};}catch(error){return{error};}};// 检查用户是否已批准\nconst isUserApproved=()=>{return(userProfile===null||userProfile===void 0?void 0:userProfile.status)==='approved';};// 检查用户是否为管理员\nconst isAdmin=()=>{return(userProfile===null||userProfile===void 0?void 0:userProfile.status)==='approved'&&(userProfile===null||userProfile===void 0?void 0:userProfile.role)==='admin';};const value={user,userProfile,loading,signUp,signIn,signOut,resetPassword,isUserApproved,isAdmin,fetchUserProfile,ensureUserProfile,// 提供supabaseClient给组件使用\nsupabaseClient};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","supabaseClient","redirectTo","concat","window","location","origin","user","setUser","userProfile","setUserProfile","loading","setLoading","getSession","_session$user","data","session","auth","fetchUserProfile","id","subscription","onAuthStateChange","event","_session$user2","_session$user3","console","log","email","ensureUserProfile","unsubscribe","userId","error","from","select","eq","single","code","existing","insert","status","requested_at","Date","toISOString","signUp","password","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","isUserApproved","isAdmin","role","value","Provider"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/src/contexts/AuthProvider.js"],"sourcesContent":["// src/contexts/AuthProvider.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ \n  children, \n  supabaseClient,\n  redirectTo = `${window.location.origin}/reset-password`\n}) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  if (!supabaseClient) {\n    throw new Error('AuthProvider requires supabaseClient prop');\n  }\n\n  useEffect(() => {\n    // 获取当前用户会话\n    const getSession = async () => {\n      const { data: { session } } = await supabaseClient.auth.getSession();\n      setUser(session?.user ?? null);\n      \n      if (session?.user) {\n        await fetchUserProfile(session.user.id);\n      }\n      setLoading(false);\n    };\n\n    getSession();\n\n    // 监听认证状态变化\n    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        console.log('=== Session user:', session?.user); // 新增\n        setUser(session?.user ?? null);\n        \n        if (session?.user) {\n          console.log('=== Calling fetchUserProfile for:', session.user.id); // 新增\n          await fetchUserProfile(session.user.id);\n          \n          // 如果是新用户登录且没有 profile，创建一个\n          if (event === 'SIGNED_IN') {\n            await ensureUserProfile(session.user);\n          }\n        } else {\n          setUserProfile(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, [supabaseClient]);\n\n  // 获取用户档案信息\n  const fetchUserProfile = async (userId) => {\n    console.log('=== fetchUserProfile called with userId:', userId);\n    console.log('=== supabaseClient:', supabaseClient);\n    \n    try {\n      console.log('=== About to query user_profiles table');\n      console.log('=== Skipping test query, going directly to main query...');\n\n      // 直接执行业务查询\n      const { data, error } = await supabaseClient\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      console.log('=== fetchUserProfile result:', { data, error });\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = 没有找到记录\n        console.error('Error fetching user profile:', error);\n      } else {\n        console.log('=== Setting userProfile to:', data);\n        setUserProfile(data);\n      }\n    } catch (error) {\n      console.error('=== fetchUserProfile catch error:', error);\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  // 确保用户有 profile 记录\n  const ensureUserProfile = async (user) => {\n    if (!user) return;\n\n    try {\n      // 先检查是否已存在\n      const { data: existing } = await supabaseClient\n        .from('user_profiles')\n        .select('id')\n        .eq('id', user.id)\n        .single();\n\n      if (!existing) {\n        // 不存在则创建\n        console.log('Creating user profile for:', user.email);\n        const { data, error } = await supabaseClient\n          .from('user_profiles')\n          .insert([\n            {\n              id: user.id,\n              email: user.email,\n              status: 'pending',\n              requested_at: new Date().toISOString(),\n            }\n          ])\n          .select()\n          .single();\n\n        if (error) {\n          console.error('Error creating user profile:', error);\n        } else {\n          console.log('User profile created successfully:', data);\n          setUserProfile(data);\n        }\n      }\n    } catch (error) {\n      console.error('Error ensuring user profile:', error);\n    }\n  };\n\n  // 用户注册\n  const signUp = async (email, password) => {\n    try {\n      console.log('Starting signup for:', email);\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      // 注册成功后，profile 会在 onAuthStateChange 中创建\n      console.log('Signup successful:', data);\n      return { data, error: null };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { data: null, error };\n    }\n  };\n\n  // 用户登录\n  const signIn = async (email, password) => {\n    try {\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      return { data, error };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // 用户登出\n  const signOut = async () => {\n    const { error } = await supabaseClient.auth.signOut();\n    return { error };\n  };\n\n  // 发送密码重置邮件\n  const resetPassword = async (email) => {\n    try {\n      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n        redirectTo,\n      });\n      return { error };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  // 检查用户是否已批准\n  const isUserApproved = () => {\n    return userProfile?.status === 'approved';\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return userProfile?.status === 'approved' && userProfile?.role === 'admin';\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    isUserApproved,\n    isAdmin,\n    fetchUserProfile,\n    ensureUserProfile,\n    // 提供supabaseClient给组件使用\n    supabaseClient,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}