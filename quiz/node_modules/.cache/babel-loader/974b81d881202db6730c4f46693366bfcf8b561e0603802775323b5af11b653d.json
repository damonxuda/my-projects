{"ast":null,"code":"/**\n * Helpers to convert the change Payload into native JS types.\n */// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;(function(PostgresTypes){PostgresTypes[\"abstime\"]=\"abstime\";PostgresTypes[\"bool\"]=\"bool\";PostgresTypes[\"date\"]=\"date\";PostgresTypes[\"daterange\"]=\"daterange\";PostgresTypes[\"float4\"]=\"float4\";PostgresTypes[\"float8\"]=\"float8\";PostgresTypes[\"int2\"]=\"int2\";PostgresTypes[\"int4\"]=\"int4\";PostgresTypes[\"int4range\"]=\"int4range\";PostgresTypes[\"int8\"]=\"int8\";PostgresTypes[\"int8range\"]=\"int8range\";PostgresTypes[\"json\"]=\"json\";PostgresTypes[\"jsonb\"]=\"jsonb\";PostgresTypes[\"money\"]=\"money\";PostgresTypes[\"numeric\"]=\"numeric\";PostgresTypes[\"oid\"]=\"oid\";PostgresTypes[\"reltime\"]=\"reltime\";PostgresTypes[\"text\"]=\"text\";PostgresTypes[\"time\"]=\"time\";PostgresTypes[\"timestamp\"]=\"timestamp\";PostgresTypes[\"timestamptz\"]=\"timestamptz\";PostgresTypes[\"timetz\"]=\"timetz\";PostgresTypes[\"tsrange\"]=\"tsrange\";PostgresTypes[\"tstzrange\"]=\"tstzrange\";})(PostgresTypes||(PostgresTypes={}));/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */export const convertChangeData=function(columns,record){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var _a;const skipTypes=(_a=options.skipTypes)!==null&&_a!==void 0?_a:[];return Object.keys(record).reduce((acc,rec_key)=>{acc[rec_key]=convertColumn(rec_key,columns,record,skipTypes);return acc;},{});};/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */export const convertColumn=(columnName,columns,record,skipTypes)=>{const column=columns.find(x=>x.name===columnName);const colType=column===null||column===void 0?void 0:column.type;const value=record[columnName];if(colType&&!skipTypes.includes(colType)){return convertCell(colType,value);}return noop(value);};/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */export const convertCell=(type,value)=>{// if data type is an array\nif(type.charAt(0)==='_'){const dataType=type.slice(1,type.length);return toArray(value,dataType);}// If not null, convert to correct type.\nswitch(type){case PostgresTypes.bool:return toBoolean(value);case PostgresTypes.float4:case PostgresTypes.float8:case PostgresTypes.int2:case PostgresTypes.int4:case PostgresTypes.int8:case PostgresTypes.numeric:case PostgresTypes.oid:return toNumber(value);case PostgresTypes.json:case PostgresTypes.jsonb:return toJson(value);case PostgresTypes.timestamp:return toTimestampString(value);// Format to be consistent with PostgREST\ncase PostgresTypes.abstime:// To allow users to cast it based on Timezone\ncase PostgresTypes.date:// To allow users to cast it based on Timezone\ncase PostgresTypes.daterange:case PostgresTypes.int4range:case PostgresTypes.int8range:case PostgresTypes.money:case PostgresTypes.reltime:// To allow users to cast it based on Timezone\ncase PostgresTypes.text:case PostgresTypes.time:// To allow users to cast it based on Timezone\ncase PostgresTypes.timestamptz:// To allow users to cast it based on Timezone\ncase PostgresTypes.timetz:// To allow users to cast it based on Timezone\ncase PostgresTypes.tsrange:case PostgresTypes.tstzrange:return noop(value);default:// Return the value for remaining types\nreturn noop(value);}};const noop=value=>{return value;};export const toBoolean=value=>{switch(value){case't':return true;case'f':return false;default:return value;}};export const toNumber=value=>{if(typeof value==='string'){const parsedValue=parseFloat(value);if(!Number.isNaN(parsedValue)){return parsedValue;}}return value;};export const toJson=value=>{if(typeof value==='string'){try{return JSON.parse(value);}catch(error){console.log(\"JSON parse error: \".concat(error));return value;}}return value;};/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */export const toArray=(value,type)=>{if(typeof value!=='string'){return value;}const lastIdx=value.length-1;const closeBrace=value[lastIdx];const openBrace=value[0];// Confirm value is a Postgres array by checking curly brackets\nif(openBrace==='{'&&closeBrace==='}'){let arr;const valTrim=value.slice(1,lastIdx);// TODO: find a better solution to separate Postgres array data\ntry{arr=JSON.parse('['+valTrim+']');}catch(_){// WARNING: splitting on comma does not cover all edge cases\narr=valTrim?valTrim.split(','):[];}return arr.map(val=>convertCell(type,val));}return value;};/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */export const toTimestampString=value=>{if(typeof value==='string'){return value.replace(' ','T');}return value;};export const httpEndpointURL=socketUrl=>{let url=socketUrl;url=url.replace(/^ws/i,'http');url=url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i,'');return url.replace(/\\/+$/,'')+'/api/broadcast';};","map":{"version":3,"names":["PostgresTypes","convertChangeData","columns","record","options","arguments","length","undefined","skipTypes","_a","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","dataType","slice","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","concat","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace","httpEndpointURL","socketUrl","url"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/realtime-js/src/lib/transformers.ts"],"sourcesContent":["/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n\nexport const httpEndpointURL = (socketUrl: string): string => {\n  let url = socketUrl\n  url = url.replace(/^ws/i, 'http')\n  url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '')\n  return url.replace(/\\/+$/, '') + '/api/broadcast'\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}