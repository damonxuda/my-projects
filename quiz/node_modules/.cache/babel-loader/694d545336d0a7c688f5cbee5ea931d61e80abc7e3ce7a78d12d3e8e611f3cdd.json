{"ast":null,"code":"// src/utils/authHelpers.js\n/**\n * 验证邮箱格式\n * @param {string} email - 邮箱地址\n * @returns {boolean} 是否为有效邮箱\n */export const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};/**\n * 验证密码强度\n * @param {string} password - 密码\n * @returns {object} 验证结果和消息\n */export const validatePassword=password=>{const errors=[];if(password.length<6){errors.push('密码至少需要6个字符');}if(!/[A-Za-z]/.test(password)){errors.push('密码需要包含字母');}if(!/\\d/.test(password)){errors.push('密码需要包含数字');}return{isValid:errors.length===0,errors};};/**\n * 格式化认证错误消息\n * @param {object} error - Supabase错误对象\n * @returns {string} 用户友好的错误消息\n */export const formatAuthError=error=>{if(!error)return'';const errorMessages={'Invalid login credentials':'邮箱或密码错误','Email not confirmed':'请先验证您的邮箱','User already registered':'该邮箱已被注册','Password should be at least 6 characters':'密码至少需要6个字符','Unable to validate email address: invalid format':'邮箱格式无效','Email rate limit exceeded':'邮件发送过于频繁，请稍后再试','Invalid email or password':'邮箱或密码错误','Email link is invalid or has expired':'邮箱链接无效或已过期','Token has expired or is invalid':'链接已过期，请重新请求','New password should be different from the old password':'新密码不能与旧密码相同'};return errorMessages[error.message]||error.message||'发生未知错误';};/**\n * 检查用户权限\n * @param {object} userProfile - 用户档案\n * @param {string} requiredRole - 需要的角色\n * @returns {boolean} 是否有权限\n */export const hasPermission=function(userProfile){let requiredRole=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'approved';if(!userProfile)return false;const roleHierarchy={'pending':0,'approved':1,'admin':2};const userLevel=roleHierarchy[userProfile.status]||0;const requiredLevel=roleHierarchy[requiredRole]||0;return userLevel>=requiredLevel;};/**\n * 生成安全的重定向URL\n * @param {string} baseUrl - 基础URL\n * @param {string} path - 路径\n * @returns {string} 完整的重定向URL\n */export const generateRedirectUrl=(baseUrl,path)=>{const url=new URL(baseUrl);url.pathname=path;return url.toString();};/**\n * 从URL中提取认证参数\n * @returns {object} 认证相关的URL参数\n */export const extractAuthParams=()=>{const urlParams=new URLSearchParams(window.location.search);const hash=new URLSearchParams(window.location.hash.substring(1));return{access_token:urlParams.get('access_token')||hash.get('access_token'),refresh_token:urlParams.get('refresh_token')||hash.get('refresh_token'),error:urlParams.get('error')||hash.get('error'),error_description:urlParams.get('error_description')||hash.get('error_description')};};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","validatePassword","password","errors","length","push","isValid","formatAuthError","error","errorMessages","message","hasPermission","userProfile","requiredRole","arguments","undefined","roleHierarchy","userLevel","status","requiredLevel","generateRedirectUrl","baseUrl","path","url","URL","pathname","toString","extractAuthParams","urlParams","URLSearchParams","window","location","search","hash","substring","access_token","get","refresh_token","error_description"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/src/utils/authHelpers.js"],"sourcesContent":["// src/utils/authHelpers.js\n\n/**\n * 验证邮箱格式\n * @param {string} email - 邮箱地址\n * @returns {boolean} 是否为有效邮箱\n */\nexport const isValidEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * 验证密码强度\n * @param {string} password - 密码\n * @returns {object} 验证结果和消息\n */\nexport const validatePassword = (password) => {\n  const errors = [];\n  \n  if (password.length < 6) {\n    errors.push('密码至少需要6个字符');\n  }\n  \n  if (!/[A-Za-z]/.test(password)) {\n    errors.push('密码需要包含字母');\n  }\n  \n  if (!/\\d/.test(password)) {\n    errors.push('密码需要包含数字');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * 格式化认证错误消息\n * @param {object} error - Supabase错误对象\n * @returns {string} 用户友好的错误消息\n */\nexport const formatAuthError = (error) => {\n  if (!error) return '';\n\n  const errorMessages = {\n    'Invalid login credentials': '邮箱或密码错误',\n    'Email not confirmed': '请先验证您的邮箱',\n    'User already registered': '该邮箱已被注册',\n    'Password should be at least 6 characters': '密码至少需要6个字符',\n    'Unable to validate email address: invalid format': '邮箱格式无效',\n    'Email rate limit exceeded': '邮件发送过于频繁，请稍后再试',\n    'Invalid email or password': '邮箱或密码错误',\n    'Email link is invalid or has expired': '邮箱链接无效或已过期',\n    'Token has expired or is invalid': '链接已过期，请重新请求',\n    'New password should be different from the old password': '新密码不能与旧密码相同'\n  };\n\n  return errorMessages[error.message] || error.message || '发生未知错误';\n};\n\n/**\n * 检查用户权限\n * @param {object} userProfile - 用户档案\n * @param {string} requiredRole - 需要的角色\n * @returns {boolean} 是否有权限\n */\nexport const hasPermission = (userProfile, requiredRole = 'approved') => {\n  if (!userProfile) return false;\n\n  const roleHierarchy = {\n    'pending': 0,\n    'approved': 1,\n    'admin': 2\n  };\n\n  const userLevel = roleHierarchy[userProfile.status] || 0;\n  const requiredLevel = roleHierarchy[requiredRole] || 0;\n\n  return userLevel >= requiredLevel;\n};\n\n/**\n * 生成安全的重定向URL\n * @param {string} baseUrl - 基础URL\n * @param {string} path - 路径\n * @returns {string} 完整的重定向URL\n */\nexport const generateRedirectUrl = (baseUrl, path) => {\n  const url = new URL(baseUrl);\n  url.pathname = path;\n  return url.toString();\n};\n\n/**\n * 从URL中提取认证参数\n * @returns {object} 认证相关的URL参数\n */\nexport const extractAuthParams = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const hash = new URLSearchParams(window.location.hash.substring(1));\n  \n  return {\n    access_token: urlParams.get('access_token') || hash.get('access_token'),\n    refresh_token: urlParams.get('refresh_token') || hash.get('refresh_token'),\n    error: urlParams.get('error') || hash.get('error'),\n    error_description: urlParams.get('error_description') || hash.get('error_description'),\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}