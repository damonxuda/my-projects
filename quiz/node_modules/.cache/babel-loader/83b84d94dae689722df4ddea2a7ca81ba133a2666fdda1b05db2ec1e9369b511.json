{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});// @ts-ignore\nconst node_fetch_1=__importDefault(require(\"@supabase/node-fetch\"));const PostgrestError_1=__importDefault(require(\"./PostgrestError\"));class PostgrestBuilder{constructor(builder){this.shouldThrowOnError=false;this.method=builder.method;this.url=builder.url;this.headers=builder.headers;this.schema=builder.schema;this.body=builder.body;this.shouldThrowOnError=builder.shouldThrowOnError;this.signal=builder.signal;this.isMaybeSingle=builder.isMaybeSingle;if(builder.fetch){this.fetch=builder.fetch;}else if(typeof fetch==='undefined'){this.fetch=node_fetch_1.default;}else{this.fetch=fetch;}}/**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */throwOnError(){this.shouldThrowOnError=true;return this;}/**\n     * Set an HTTP header for the request.\n     */setHeader(name,value){this.headers=Object.assign({},this.headers);this.headers[name]=value;return this;}then(onfulfilled,onrejected){// https://postgrest.org/en/stable/api.html#switching-schemas\nif(this.schema===undefined){// skip\n}else if(['GET','HEAD'].includes(this.method)){this.headers['Accept-Profile']=this.schema;}else{this.headers['Content-Profile']=this.schema;}if(this.method!=='GET'&&this.method!=='HEAD'){this.headers['Content-Type']='application/json';}// NOTE: Invoke w/o `this` to avoid illegal invocation error.\n// https://github.com/supabase/postgrest-js/pull/247\nconst _fetch=this.fetch;let res=_fetch(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async res=>{var _a,_b,_c;let error=null;let data=null;let count=null;let status=res.status;let statusText=res.statusText;if(res.ok){if(this.method!=='HEAD'){const body=await res.text();if(body===''){// Prefer: return=minimal\n}else if(this.headers['Accept']==='text/csv'){data=body;}else if(this.headers['Accept']&&this.headers['Accept'].includes('application/vnd.pgrst.plan+text')){data=body;}else{data=JSON.parse(body);}}const countHeader=(_a=this.headers['Prefer'])===null||_a===void 0?void 0:_a.match(/count=(exact|planned|estimated)/);const contentRange=(_b=res.headers.get('content-range'))===null||_b===void 0?void 0:_b.split('/');if(countHeader&&contentRange&&contentRange.length>1){count=parseInt(contentRange[1]);}// Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n// Issue persists e.g. for `.insert([...]).select().maybeSingle()`\nif(this.isMaybeSingle&&this.method==='GET'&&Array.isArray(data)){if(data.length>1){error={// https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\ncode:'PGRST116',details:`Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:'JSON object requested, multiple (or no) rows returned'};data=null;count=null;status=406;statusText='Not Acceptable';}else if(data.length===1){data=data[0];}else{data=null;}}}else{const body=await res.text();try{error=JSON.parse(body);// Workaround for https://github.com/supabase/postgrest-js/issues/295\nif(Array.isArray(error)&&res.status===404){data=[];error=null;status=200;statusText='OK';}}catch(_d){// Workaround for https://github.com/supabase/postgrest-js/issues/295\nif(res.status===404&&body===''){status=204;statusText='No Content';}else{error={message:body};}}if(error&&this.isMaybeSingle&&((_c=error===null||error===void 0?void 0:error.details)===null||_c===void 0?void 0:_c.includes('0 rows'))){error=null;status=200;statusText='OK';}if(error&&this.shouldThrowOnError){throw new PostgrestError_1.default(error);}}const postgrestResponse={error,data,count,status,statusText};return postgrestResponse;});if(!this.shouldThrowOnError){res=res.catch(fetchError=>{var _a,_b,_c;return{error:{message:`${(_a=fetchError===null||fetchError===void 0?void 0:fetchError.name)!==null&&_a!==void 0?_a:'FetchError'}: ${fetchError===null||fetchError===void 0?void 0:fetchError.message}`,details:`${(_b=fetchError===null||fetchError===void 0?void 0:fetchError.stack)!==null&&_b!==void 0?_b:''}`,hint:'',code:`${(_c=fetchError===null||fetchError===void 0?void 0:fetchError.code)!==null&&_c!==void 0?_c:''}`},data:null,count:null,status:0,statusText:''};});}return res.then(onfulfilled,onrejected);}/**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */returns(){/* istanbul ignore next */return this;}/**\n     * Override the type of the returned `data` field in the response.\n     *\n     * @typeParam NewResult - The new type to cast the response data to\n     * @typeParam Options - Optional type configuration (defaults to { merge: true })\n     * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n     * @example\n     * ```typescript\n     * // Merge with existing types (default behavior)\n     * const query = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ custom_field: string }>()\n     *\n     * // Replace existing types completely\n     * const replaceQuery = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n     * ```\n     * @returns A PostgrestBuilder instance with the new type\n     */overrideTypes(){return this;}}exports.default=PostgrestBuilder;","map":{"version":3,"names":["node_fetch_1","__importDefault","require","PostgrestError_1","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","schema","body","signal","isMaybeSingle","fetch","default","throwOnError","setHeader","name","value","Object","assign","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","error","data","count","status","statusText","ok","text","parse","countHeader","_a","match","contentRange","_b","get","split","length","parseInt","Array","isArray","code","details","hint","message","_d","_c","postgrestResponse","catch","fetchError","stack","returns","overrideTypes","exports"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch'\n\nimport type {\n  Fetch,\n  PostgrestSingleResponse,\n  PostgrestResponseSuccess,\n  CheckMatchingArrayTypes,\n  MergePartialResult,\n  IsValidResultOverride,\n} from './types'\nimport PostgrestError from './PostgrestError'\nimport { ContainsNull } from './select-query-parser/types'\n\nexport default abstract class PostgrestBuilder<Result, ThrowOnError extends boolean = false>\n  implements\n    PromiseLike<\n      ThrowOnError extends true ? PostgrestResponseSuccess<Result> : PostgrestSingleResponse<Result>\n    >\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this & PostgrestBuilder<Result, true> {\n    this.shouldThrowOnError = true\n    return this as this & PostgrestBuilder<Result, true>\n  }\n\n  /**\n   * Set an HTTP header for the request.\n   */\n  setHeader(name: string, value: string): this {\n    this.headers = { ...this.headers }\n    this.headers[name] = value\n    return this\n  }\n\n  then<\n    TResult1 = ThrowOnError extends true\n      ? PostgrestResponseSuccess<Result>\n      : PostgrestSingleResponse<Result>,\n    TResult2 = never\n  >(\n    onfulfilled?:\n      | ((\n          value: ThrowOnError extends true\n            ? PostgrestResponseSuccess<Result>\n            : PostgrestSingleResponse<Result>\n        ) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError(error)\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n   */\n  returns<NewResult>(): PostgrestBuilder<CheckMatchingArrayTypes<Result, NewResult>, ThrowOnError> {\n    /* istanbul ignore next */\n    return this as unknown as PostgrestBuilder<\n      CheckMatchingArrayTypes<Result, NewResult>,\n      ThrowOnError\n    >\n  }\n\n  /**\n   * Override the type of the returned `data` field in the response.\n   *\n   * @typeParam NewResult - The new type to cast the response data to\n   * @typeParam Options - Optional type configuration (defaults to { merge: true })\n   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n   * @example\n   * ```typescript\n   * // Merge with existing types (default behavior)\n   * const query = supabase\n   *   .from('users')\n   *   .select()\n   *   .overrideTypes<{ custom_field: string }>()\n   *\n   * // Replace existing types completely\n   * const replaceQuery = supabase\n   *   .from('users')\n   *   .select()\n   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n   * ```\n   * @returns A PostgrestBuilder instance with the new type\n   */\n  overrideTypes<\n    NewResult,\n    Options extends { merge?: boolean } = { merge: true }\n  >(): PostgrestBuilder<\n    IsValidResultOverride<Result, NewResult, false, false> extends true\n      ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\n        ContainsNull<Result> extends true\n        ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\n        : MergePartialResult<NewResult, Result, Options>\n      : CheckMatchingArrayTypes<Result, NewResult>,\n    ThrowOnError\n  > {\n    return this as unknown as PostgrestBuilder<\n      IsValidResultOverride<Result, NewResult, false, false> extends true\n        ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\n          ContainsNull<Result> extends true\n          ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\n          : MergePartialResult<NewResult, Result, Options>\n        : CheckMatchingArrayTypes<Result, NewResult>,\n      ThrowOnError\n    >\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}