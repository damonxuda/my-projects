{"ast":null,"code":"export const resolveFetch=customFetch=>{let _fetch;if(customFetch){_fetch=customFetch;}else if(typeof fetch==='undefined'){_fetch=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return import('@supabase/node-fetch').then(_ref=>{let{default:fetch}=_ref;return fetch(...args);});};}else{_fetch=fetch;}return function(){return _fetch(...arguments);};};","map":{"version":3,"names":["resolveFetch","customFetch","_fetch","fetch","_len","arguments","length","args","Array","_key","then","_ref","default"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/functions-js/src/helper.ts"],"sourcesContent":["import { Fetch } from './types'\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n"],"mappings":"AAEA,MAAO,MAAM,CAAAA,YAAY,CAAIC,WAAmB,EAAW,CACzD,GAAI,CAAAC,MAAa,CACjB,GAAID,WAAW,CAAE,CACfC,MAAM,CAAGD,WAAW,C,CACrB,IAAM,IAAI,MAAO,CAAAE,KAAK,GAAK,WAAW,CAAE,CACvCD,MAAM,CAAG,QAAAA,CAAA,UAAAE,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAAIC,IAAI,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,SACf,OAAM,CAAC,sBAA6B,CAAC,CAACC,IAAI,CAACC,IAAA,MAAC,CAAEC,OAAO,CAAET,KAAK,CAAE,CAAAQ,IAAA,OAAK,CAAAR,KAAK,CAAC,GAAGI,IAAI,CAAC,GAAC,G,CACrF,IAAM,CACLL,MAAM,CAAGC,KAAK,C,CAEhB,MAAO,kBAAa,CAAAD,MAAM,CAAC,GAAAG,SAAO,CAAC,GACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}