{"ast":null,"code":"// Real Supabase Database Service\nimport{createSupabaseClientFromEnv,SUPABASE_CONFIG}from'../../../auth/src';class DatabaseService{constructor(){this.supabase=null;this.tables=SUPABASE_CONFIG.tables;this.initializeSupabase();}// 初始化Supabase客户端\ninitializeSupabase(){try{this.supabase=createSupabaseClientFromEnv();console.log('✅ DatabaseService: Supabase client initialized');}catch(error){console.error('❌ DatabaseService: Failed to initialize Supabase client:',error);throw error;}}// ===============================\n// 题目相关操作\n// ===============================\nasync addQuestion(questionData){try{const{data,error}=await this.supabase.from(this.tables.questions).insert([{title:questionData.title,content:questionData.content,type:questionData.type||'multiple_choice',options:questionData.options,correct_answer:questionData.correctAnswer,explanation:questionData.explanation,difficulty:questionData.difficulty||1,is_active:true}]).select().single();if(error)throw error;// 如果有标签，添加标签关联\nif(questionData.tags&&questionData.tags.length>0){await this.addQuestionTags(data.id,questionData.tags);}return{success:true,data};}catch(error){console.error('Error adding question:',error);return{success:false,error:error.message};}}async getQuestions(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{let query=this.supabase.from(this.tables.questions).select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `).eq('is_active',true).order('created_at',{ascending:false});// 应用过滤器\nif(filters.difficulty){query=query.eq('difficulty',filters.difficulty);}if(filters.type){query=query.eq('type',filters.type);}if(filters.search){query=query.or(`title.ilike.%${filters.search}%,content.ilike.%${filters.search}%`);}const{data,error}=await query;if(error)throw error;// 格式化数据，将标签扁平化\nconst formattedData=data.map(question=>{var _question$question_ta;return{...question,tags:((_question$question_ta=question.question_tags)===null||_question$question_ta===void 0?void 0:_question$question_ta.map(qt=>qt.tags))||[]};});return{success:true,data:formattedData};}catch(error){console.error('Error getting questions:',error);return{success:false,error:error.message};}}async getQuestionById(id){try{var _data$question_tags;const{data,error}=await this.supabase.from(this.tables.questions).select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `).eq('id',id).eq('is_active',true).single();if(error)throw error;// 格式化标签\nconst formattedData={...data,tags:((_data$question_tags=data.question_tags)===null||_data$question_tags===void 0?void 0:_data$question_tags.map(qt=>qt.tags))||[]};return{success:true,data:formattedData};}catch(error){console.error('Error getting question:',error);return{success:false,error:error.message};}}async updateQuestion(id,updates){try{const{data,error}=await this.supabase.from(this.tables.questions).update({...updates,updated_at:new Date().toISOString()}).eq('id',id).select().single();if(error)throw error;// 如果更新了标签，重新设置标签关联\nif(updates.tags!==undefined){await this.updateQuestionTags(id,updates.tags);}return{success:true,data};}catch(error){console.error('Error updating question:',error);return{success:false,error:error.message};}}async deleteQuestion(id){try{const{error}=await this.supabase.from(this.tables.questions).update({is_active:false})// 软删除\n.eq('id',id);if(error)throw error;return{success:true};}catch(error){console.error('Error deleting question:',error);return{success:false,error:error.message};}}// ===============================\n// 标签相关操作\n// ===============================\nasync getTags(){try{const{data,error}=await this.supabase.from(this.tables.tags).select('*').order('name');if(error)throw error;return{success:true,data};}catch(error){console.error('Error getting tags:',error);return{success:false,error:error.message};}}async addTag(tagData){try{const{data,error}=await this.supabase.from(this.tables.tags).insert([{name:tagData.name,color:tagData.color||'#3B82F6',description:tagData.description}]).select().single();if(error)throw error;return{success:true,data};}catch(error){console.error('Error adding tag:',error);return{success:false,error:error.message};}}async addQuestionTags(questionId,tagIds){try{const tagAssociations=tagIds.map(tagId=>({question_id:questionId,tag_id:tagId}));const{error}=await this.supabase.from(this.tables.question_tags).insert(tagAssociations);if(error)throw error;return{success:true};}catch(error){console.error('Error adding question tags:',error);return{success:false,error:error.message};}}async updateQuestionTags(questionId,tagIds){try{// 先删除现有关联\nawait this.supabase.from(this.tables.question_tags).delete().eq('question_id',questionId);// 如果有新标签，添加新关联\nif(tagIds&&tagIds.length>0){await this.addQuestionTags(questionId,tagIds);}return{success:true};}catch(error){console.error('Error updating question tags:',error);return{success:false,error:error.message};}}// ===============================\n// 答题记录相关操作\n// ===============================\nasync recordAttempt(attemptData){try{const{data,error}=await this.supabase.from(this.tables.attempts).insert([{question_id:attemptData.questionId,user_answer:attemptData.userAnswer,is_correct:attemptData.isCorrect,response_time:attemptData.responseTime,user_id:attemptData.userId,session_id:attemptData.sessionId}]).select().single();if(error)throw error;return{success:true,data};}catch(error){console.error('Error recording attempt:',error);return{success:false,error:error.message};}}async getAttempts(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{let query=this.supabase.from(this.tables.attempts).select(`\n          *,\n          questions (\n            id,\n            title,\n            difficulty\n          )\n        `).order('attempted_at',{ascending:false});if(filters.userId){query=query.eq('user_id',filters.userId);}if(filters.sessionId){query=query.eq('session_id',filters.sessionId);}if(filters.questionId){query=query.eq('question_id',filters.questionId);}const{data,error}=await query;if(error)throw error;return{success:true,data};}catch(error){console.error('Error getting attempts:',error);return{success:false,error:error.message};}}// ===============================\n// 统计相关操作\n// ===============================\nasync getStatistics(){let userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let sessionId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{let filter={};if(userId)filter.user_id=userId;if(sessionId)filter.session_id=sessionId;const{data:attempts,error}=await this.supabase.from(this.tables.attempts).select('*').match(filter);if(error)throw error;const stats={totalQuestions:attempts.length,correctAnswers:attempts.filter(a=>a.is_correct).length,averageTime:attempts.length>0?attempts.reduce((sum,a)=>sum+(a.response_time||0),0)/attempts.length:0,accuracy:attempts.length>0?attempts.filter(a=>a.is_correct).length/attempts.length*100:0};return{success:true,data:stats};}catch(error){console.error('Error getting statistics:',error);return{success:false,error:error.message};}}// ===============================\n// 工具方法\n// ===============================\nasync testConnection(){try{if(!this.supabase){throw new Error('Supabase client not initialized');}const{data,error}=await this.supabase.from(this.tables.questions).select('count(*)').limit(1);if(error)throw error;console.log('✅ Supabase connection successful!');return{success:true,message:'Database connection successful'};}catch(error){console.error('❌ Supabase connection failed:',error);return{success:false,error:error.message};}}}// 导出单例实例\nexport default new DatabaseService();","map":{"version":3,"names":["createSupabaseClientFromEnv","SUPABASE_CONFIG","DatabaseService","constructor","supabase","tables","initializeSupabase","console","log","error","addQuestion","questionData","data","from","questions","insert","title","content","type","options","correct_answer","correctAnswer","explanation","difficulty","is_active","select","single","tags","length","addQuestionTags","id","success","message","getQuestions","filters","arguments","undefined","query","eq","order","ascending","search","or","formattedData","map","question","_question$question_ta","question_tags","qt","getQuestionById","_data$question_tags","updateQuestion","updates","update","updated_at","Date","toISOString","updateQuestionTags","deleteQuestion","getTags","addTag","tagData","name","color","description","questionId","tagIds","tagAssociations","tagId","question_id","tag_id","delete","recordAttempt","attemptData","attempts","user_answer","userAnswer","is_correct","isCorrect","response_time","responseTime","user_id","userId","session_id","sessionId","getAttempts","getStatistics","filter","match","stats","totalQuestions","correctAnswers","a","averageTime","reduce","sum","accuracy","testConnection","Error","limit"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/quiz/src/services/DatabaseService.js"],"sourcesContent":["// Real Supabase Database Service\nimport { createSupabaseClientFromEnv, SUPABASE_CONFIG } from '../../../auth/src';\n\nclass DatabaseService {\n  constructor() {\n    this.supabase = null;\n    this.tables = SUPABASE_CONFIG.tables;\n    this.initializeSupabase();\n  }\n\n  // 初始化Supabase客户端\n  initializeSupabase() {\n    try {\n      this.supabase = createSupabaseClientFromEnv();\n      console.log('✅ DatabaseService: Supabase client initialized');\n    } catch (error) {\n      console.error('❌ DatabaseService: Failed to initialize Supabase client:', error);\n      throw error;\n    }\n  }\n\n  // ===============================\n  // 题目相关操作\n  // ===============================\n  \n  async addQuestion(questionData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .insert([{\n          title: questionData.title,\n          content: questionData.content,\n          type: questionData.type || 'multiple_choice',\n          options: questionData.options,\n          correct_answer: questionData.correctAnswer,\n          explanation: questionData.explanation,\n          difficulty: questionData.difficulty || 1,\n          is_active: true\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      \n      // 如果有标签，添加标签关联\n      if (questionData.tags && questionData.tags.length > 0) {\n        await this.addQuestionTags(data.id, questionData.tags);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error adding question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getQuestions(filters = {}) {\n    try {\n      let query = this.supabase\n        .from(this.tables.questions)\n        .select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `)\n        .eq('is_active', true)\n        .order('created_at', { ascending: false });\n\n      // 应用过滤器\n      if (filters.difficulty) {\n        query = query.eq('difficulty', filters.difficulty);\n      }\n      \n      if (filters.type) {\n        query = query.eq('type', filters.type);\n      }\n\n      if (filters.search) {\n        query = query.or(`title.ilike.%${filters.search}%,content.ilike.%${filters.search}%`);\n      }\n\n      const { data, error } = await query;\n      \n      if (error) throw error;\n\n      // 格式化数据，将标签扁平化\n      const formattedData = data.map(question => ({\n        ...question,\n        tags: question.question_tags?.map(qt => qt.tags) || []\n      }));\n\n      return { success: true, data: formattedData };\n    } catch (error) {\n      console.error('Error getting questions:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getQuestionById(id) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .select(`\n          *,\n          question_tags (\n            tags (\n              id,\n              name,\n              color\n            )\n          )\n        `)\n        .eq('id', id)\n        .eq('is_active', true)\n        .single();\n\n      if (error) throw error;\n\n      // 格式化标签\n      const formattedData = {\n        ...data,\n        tags: data.question_tags?.map(qt => qt.tags) || []\n      };\n\n      return { success: true, data: formattedData };\n    } catch (error) {\n      console.error('Error getting question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async updateQuestion(id, updates) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // 如果更新了标签，重新设置标签关联\n      if (updates.tags !== undefined) {\n        await this.updateQuestionTags(id, updates.tags);\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error updating question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async deleteQuestion(id) {\n    try {\n      const { error } = await this.supabase\n        .from(this.tables.questions)\n        .update({ is_active: false })  // 软删除\n        .eq('id', id);\n\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting question:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 标签相关操作\n  // ===============================\n\n  async getTags() {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.tags)\n        .select('*')\n        .order('name');\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error getting tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async addTag(tagData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.tags)\n        .insert([{\n          name: tagData.name,\n          color: tagData.color || '#3B82F6',\n          description: tagData.description\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error adding tag:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async addQuestionTags(questionId, tagIds) {\n    try {\n      const tagAssociations = tagIds.map(tagId => ({\n        question_id: questionId,\n        tag_id: tagId\n      }));\n\n      const { error } = await this.supabase\n        .from(this.tables.question_tags)\n        .insert(tagAssociations);\n\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Error adding question tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async updateQuestionTags(questionId, tagIds) {\n    try {\n      // 先删除现有关联\n      await this.supabase\n        .from(this.tables.question_tags)\n        .delete()\n        .eq('question_id', questionId);\n\n      // 如果有新标签，添加新关联\n      if (tagIds && tagIds.length > 0) {\n        await this.addQuestionTags(questionId, tagIds);\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating question tags:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 答题记录相关操作\n  // ===============================\n\n  async recordAttempt(attemptData) {\n    try {\n      const { data, error } = await this.supabase\n        .from(this.tables.attempts)\n        .insert([{\n          question_id: attemptData.questionId,\n          user_answer: attemptData.userAnswer,\n          is_correct: attemptData.isCorrect,\n          response_time: attemptData.responseTime,\n          user_id: attemptData.userId,\n          session_id: attemptData.sessionId\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error recording attempt:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getAttempts(filters = {}) {\n    try {\n      let query = this.supabase\n        .from(this.tables.attempts)\n        .select(`\n          *,\n          questions (\n            id,\n            title,\n            difficulty\n          )\n        `)\n        .order('attempted_at', { ascending: false });\n\n      if (filters.userId) {\n        query = query.eq('user_id', filters.userId);\n      }\n\n      if (filters.sessionId) {\n        query = query.eq('session_id', filters.sessionId);\n      }\n\n      if (filters.questionId) {\n        query = query.eq('question_id', filters.questionId);\n      }\n\n      const { data, error } = await query;\n      \n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error getting attempts:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 统计相关操作\n  // ===============================\n\n  async getStatistics(userId = null, sessionId = null) {\n    try {\n      let filter = {};\n      if (userId) filter.user_id = userId;\n      if (sessionId) filter.session_id = sessionId;\n\n      const { data: attempts, error } = await this.supabase\n        .from(this.tables.attempts)\n        .select('*')\n        .match(filter);\n\n      if (error) throw error;\n\n      const stats = {\n        totalQuestions: attempts.length,\n        correctAnswers: attempts.filter(a => a.is_correct).length,\n        averageTime: attempts.length > 0 ? \n          attempts.reduce((sum, a) => sum + (a.response_time || 0), 0) / attempts.length : 0,\n        accuracy: attempts.length > 0 ? \n          (attempts.filter(a => a.is_correct).length / attempts.length) * 100 : 0\n      };\n\n      return { success: true, data: stats };\n    } catch (error) {\n      console.error('Error getting statistics:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // ===============================\n  // 工具方法\n  // ===============================\n\n  async testConnection() {\n    try {\n      if (!this.supabase) {\n        throw new Error('Supabase client not initialized');\n      }\n\n      const { data, error } = await this.supabase\n        .from(this.tables.questions)\n        .select('count(*)')\n        .limit(1);\n\n      if (error) throw error;\n      \n      console.log('✅ Supabase connection successful!');\n      return { success: true, message: 'Database connection successful' };\n    } catch (error) {\n      console.error('❌ Supabase connection failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n}\n\n// 导出单例实例\nexport default new DatabaseService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}