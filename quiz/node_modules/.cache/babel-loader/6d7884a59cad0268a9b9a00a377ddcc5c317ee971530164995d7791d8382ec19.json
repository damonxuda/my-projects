{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});const PostgrestBuilder_1=__importDefault(require(\"./PostgrestBuilder\"));class PostgrestTransformBuilder extends PostgrestBuilder_1.default{/**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */select(columns){// Remove whitespaces except when quoted\nlet quoted=false;const cleanedColumns=(columns!==null&&columns!==void 0?columns:'*').split('').map(c=>{if(/\\s/.test(c)&&!quoted){return'';}if(c==='\"'){quoted=!quoted;}return c;}).join('');this.url.searchParams.set('select',cleanedColumns);if(this.headers['Prefer']){this.headers['Prefer']+=',';}this.headers['Prefer']+='return=representation';return this;}/**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */order(column){let{ascending=true,nullsFirst,foreignTable,referencedTable=foreignTable}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const key=referencedTable?`${referencedTable}.order`:'order';const existingOrder=this.url.searchParams.get(key);this.url.searchParams.set(key,`${existingOrder?`${existingOrder},`:''}${column}.${ascending?'asc':'desc'}${nullsFirst===undefined?'':nullsFirst?'.nullsfirst':'.nullslast'}`);return this;}/**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */limit(count){let{foreignTable,referencedTable=foreignTable}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const key=typeof referencedTable==='undefined'?'limit':`${referencedTable}.limit`;this.url.searchParams.set(key,`${count}`);return this;}/**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */range(from,to){let{foreignTable,referencedTable=foreignTable}=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const keyOffset=typeof referencedTable==='undefined'?'offset':`${referencedTable}.offset`;const keyLimit=typeof referencedTable==='undefined'?'limit':`${referencedTable}.limit`;this.url.searchParams.set(keyOffset,`${from}`);// Range is inclusive, so add 1\nthis.url.searchParams.set(keyLimit,`${to-from+1}`);return this;}/**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */abortSignal(signal){this.signal=signal;return this;}/**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */single(){this.headers['Accept']='application/vnd.pgrst.object+json';return this;}/**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */maybeSingle(){// Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n// Issue persists e.g. for `.insert([...]).select().maybeSingle()`\nif(this.method==='GET'){this.headers['Accept']='application/json';}else{this.headers['Accept']='application/vnd.pgrst.object+json';}this.isMaybeSingle=true;return this;}/**\n     * Return `data` as a string in CSV format.\n     */csv(){this.headers['Accept']='text/csv';return this;}/**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */geojson(){this.headers['Accept']='application/geo+json';return this;}/**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */explain(){let{analyze=false,verbose=false,settings=false,buffers=false,wal=false,format='text'}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _a;const options=[analyze?'analyze':null,verbose?'verbose':null,settings?'settings':null,buffers?'buffers':null,wal?'wal':null].filter(Boolean).join('|');// An Accept header can carry multiple media types but postgrest-js always sends one\nconst forMediatype=(_a=this.headers['Accept'])!==null&&_a!==void 0?_a:'application/json';this.headers['Accept']=`application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;if(format==='json')return this;else return this;}/**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */rollback(){var _a;if(((_a=this.headers['Prefer'])!==null&&_a!==void 0?_a:'').trim().length>0){this.headers['Prefer']+=',tx=rollback';}else{this.headers['Prefer']='tx=rollback';}return this;}/**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */returns(){return this;}}exports.default=PostgrestTransformBuilder;","map":{"version":3,"names":["PostgrestBuilder_1","__importDefault","require","PostgrestTransformBuilder","default","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","referencedTable","arguments","length","undefined","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","method","isMaybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","_a","rollback","trim","returns","exports"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/postgrest-js/src/PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser/result'\nimport { GenericSchema, CheckMatchingArrayTypes } from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  RelationName = unknown,\n  Relationships = unknown\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<\n    Query extends string = '*',\n    NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query>\n  >(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[], RelationName, Relationships> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<\n      Schema,\n      Row,\n      NewResultOne[],\n      RelationName,\n      Relationships\n    >\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: string }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order referenced tables, but it only affects the ordering of the\n   * parent table if you use `!inner` in the query.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.referencedTable - Set this to order a referenced table by\n   * its columns\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable,\n    }: {\n      ascending?: boolean\n      nullsFirst?: boolean\n      foreignTable?: string\n      referencedTable?: string\n    } = {}\n  ): this {\n    const key = referencedTable ? `${referencedTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  limit(\n    count: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n   * Only records within this range are returned.\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n   * and fourth rows of the query.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  range(\n    from: number,\n    to: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const keyOffset =\n      typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as unknown as PostgrestBuilder<ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne | null> {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json'\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    }\n    this.isMaybeSingle = true\n    return this as unknown as PostgrestBuilder<ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<string> {\n    this.headers['Accept'] = 'text/csv'\n    return this as unknown as PostgrestBuilder<string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as unknown as PostgrestBuilder<Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * You need to enable the\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n   * setting before using this method.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept'] ?? 'application/json'\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as unknown as PostgrestBuilder<Record<string, unknown>[]>\n    else return this as unknown as PostgrestBuilder<string>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<\n    Schema,\n    Row,\n    CheckMatchingArrayTypes<Result, NewResult>,\n    RelationName,\n    Relationships\n  > {\n    return this as unknown as PostgrestTransformBuilder<\n      Schema,\n      Row,\n      CheckMatchingArrayTypes<Result, NewResult>,\n      RelationName,\n      Relationships\n    >\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}