{"ast":null,"code":"// src/utils/markdownParser.js\n// Markdown解析引擎 - 专门解析AI生成的题目文档\nimport{MARKDOWN_PATTERNS,QUESTION_TYPES}from'./constants.js';/**\n * 解析Markdown文档，提取题目信息\n * @param {string} markdownText - Markdown文档内容\n * @param {string[]} baseTags - 基础标签（课程信息）\n * @returns {Object[]} - 解析出的题目数组\n */export const parseMarkdownQuestions=function(markdownText){let baseTags=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];console.log('📖 开始解析Markdown文档');console.log('📝 文档长度:',markdownText.length);console.log('🏷️ 基础标签:',baseTags);if(!markdownText||typeof markdownText!=='string'){console.warn('❌ 输入文档为空或格式错误');return[];}const lines=markdownText.split('\\n');const questions=[];let currentQuestion=null;let currentSection='question';// question, solution, answer\nlet lineNumber=0;console.log(\"\\uD83D\\uDCC4 \\u603B\\u884C\\u6570: \".concat(lines.length));for(const line of lines){lineNumber++;const trimmedLine=line.trim();// 跳过空行\nif(!trimmedLine)continue;// 检查是否是新题目开始\nconst questionMatch=matchQuestionPattern(trimmedLine);if(questionMatch){// 保存上一道题目\nif(currentQuestion&&isValidQuestion(currentQuestion)){const processedQuestion=processQuestion(currentQuestion,baseTags);questions.push(processedQuestion);console.log(\"\\u2705 \\u5B8C\\u6210\\u9898\\u76EE: \".concat(processedQuestion.questionType));}// 开始新题目\nconsole.log(\"\\uD83C\\uDD95 \\u53D1\\u73B0\\u65B0\\u9898\\u76EE: \".concat(questionMatch.type,\" (\\u884C \").concat(lineNumber,\")\"));currentQuestion={questionType:questionMatch.type,questionText:questionMatch.content||'',answer:'',solutionSteps:'',rawLine:trimmedLine,startLine:lineNumber};currentSection='question';continue;}// 如果没有当前题目，跳过这行\nif(!currentQuestion)continue;// 检查解题思路标识\nif(isSolutionSection(trimmedLine)){console.log(\"\\uD83D\\uDCA1 \\u8FDB\\u5165\\u89E3\\u9898\\u601D\\u8DEF\\u90E8\\u5206 (\\u884C \".concat(lineNumber,\")\"));currentSection='solution';continue;}// 检查答案标识\nconst answerMatch=matchAnswerPattern(trimmedLine);if(answerMatch){console.log(\"\\u2705 \\u627E\\u5230\\u7B54\\u6848 (\\u884C \".concat(lineNumber,\"): \").concat(answerMatch.substring(0,50),\"...\"));currentQuestion.answer=answerMatch;continue;}// 处理普通内容行\nif(isContentLine(trimmedLine)){processContentLine(currentQuestion,trimmedLine,currentSection);}}// 处理最后一道题目\nif(currentQuestion&&isValidQuestion(currentQuestion)){const processedQuestion=processQuestion(currentQuestion,baseTags);questions.push(processedQuestion);console.log(\"\\u2705 \\u5B8C\\u6210\\u6700\\u540E\\u4E00\\u9898: \".concat(processedQuestion.questionType));}console.log(\"\\uD83C\\uDF89 \\u89E3\\u6790\\u5B8C\\u6210! \\u5171\\u89E3\\u6790\\u51FA \".concat(questions.length,\" \\u9053\\u9898\\u76EE\"));return questions;};/**\n * 匹配题目模式\n */const matchQuestionPattern=line=>{for(const pattern of MARKDOWN_PATTERNS.questionPatterns){const match=line.match(pattern);if(match){return{type:match[1],// 例1, 习题1等\ncontent:match[2]||'',// 题目内容\nfullMatch:match[0]};}}return null;};/**\n * 匹配答案模式\n */const matchAnswerPattern=line=>{for(const pattern of MARKDOWN_PATTERNS.answerPatterns){const match=line.match(pattern);if(match){return match[1].replace(/\\*+/g,'').trim();}}return null;};/**\n * 检查是否是解题思路部分\n */const isSolutionSection=line=>{return MARKDOWN_PATTERNS.solutionKeywords.some(keyword=>line.includes(keyword));};/**\n * 检查是否是有效的内容行\n */const isContentLine=line=>{// 排除Markdown标记行\nconst excludePatterns=[/^#+\\s/,// 标题行\n/^-{3,}$/,// 分隔线\n/^\\*{3,}$/,// 分隔线\n/^={3,}$/,// 分隔线\n/^\\s*$/// 空行\n];return!excludePatterns.some(pattern=>pattern.test(line))&&line.length>2;};/**\n * 处理内容行\n */const processContentLine=(question,line,section)=>{if(section==='solution'){question.solutionSteps+=line+'\\n';}else if(section==='question'){// 如果题目文字为空，这是第一行\nif(!question.questionText||question.questionText.trim()===''){question.questionText=line;}else{// 否则追加到题目内容（用空格连接）\nquestion.questionText+=' '+line;}}};/**\n * 验证题目是否有效\n */const isValidQuestion=question=>{const hasValidType=QUESTION_TYPES.includes(question.questionType);const hasContent=question.questionText&&question.questionText.trim().length>5;if(!hasValidType){console.warn(\"\\u26A0\\uFE0F \\u65E0\\u6548\\u7684\\u9898\\u76EE\\u7C7B\\u578B: \".concat(question.questionType));}if(!hasContent){console.warn(\"\\u26A0\\uFE0F \\u9898\\u76EE\\u5185\\u5BB9\\u8FC7\\u77ED\\u6216\\u4E3A\\u7A7A: \".concat(question.questionText));}return hasValidType&&hasContent;};/**\n * 处理题目，添加基础信息\n */const processQuestion=(rawQuestion,baseTags)=>{return{questionType:rawQuestion.questionType,questionText:cleanText(rawQuestion.questionText),answer:cleanText(rawQuestion.answer),solutionSteps:cleanText(rawQuestion.solutionSteps),tags:[...baseTags],// 使用传入的基础标签\ncreatedAt:new Date().toISOString(),metadata:{parsedAt:new Date().toISOString(),startLine:rawQuestion.startLine,originalLength:rawQuestion.questionText.length}};};/**\n * 清理文本内容\n */const cleanText=text=>{if(!text||typeof text!=='string')return'';return text.trim()// 去除首尾空格\n.replace(/\\*+/g,'')// 去除Markdown粗体标记\n.replace(/_{2,}/g,'')// 去除下划线\n.replace(/\\s+/g,' ')// 合并多个空格\n.replace(/\\n\\s*\\n/g,'\\n')// 合并多个换行\n.trim();};/**\n * 验证解析结果\n */export const validateParseResult=questions=>{const validation={isValid:true,totalQuestions:questions.length,issues:[],statistics:{byType:{},averageLength:0,withAnswers:0,withSolutions:0}};let totalLength=0;questions.forEach((question,index)=>{// 统计题目类型\nvalidation.statistics.byType[question.questionType]=(validation.statistics.byType[question.questionType]||0)+1;// 统计长度\ntotalLength+=question.questionText.length;// 统计答案和解题思路\nif(question.answer&&question.answer.trim()){validation.statistics.withAnswers++;}if(question.solutionSteps&&question.solutionSteps.trim()){validation.statistics.withSolutions++;}// 检查问题\nif(question.questionText.length<10){validation.issues.push(\"\\u9898\\u76EE \".concat(index+1,\" \\u5185\\u5BB9\\u8FC7\\u77ED\"));}if(!question.answer||!question.answer.trim()){validation.issues.push(\"\\u9898\\u76EE \".concat(index+1,\" \\u7F3A\\u5C11\\u7B54\\u6848\"));}if(question.tags.length===0){validation.issues.push(\"\\u9898\\u76EE \".concat(index+1,\" \\u7F3A\\u5C11\\u6807\\u7B7E\"));}});validation.statistics.averageLength=questions.length>0?Math.round(totalLength/questions.length):0;validation.isValid=validation.issues.length===0;return validation;};/**\n * 生成解析报告\n */export const generateParseReport=(questions,originalText)=>{const validation=validateParseResult(questions);const report={timestamp:new Date().toISOString(),input:{originalLength:originalText.length,lineCount:originalText.split('\\n').length},output:{questionCount:questions.length,successRate:questions.length>0?'100%':'0%'},validation,recommendations:[]};// 生成建议\nif(validation.statistics.withAnswers<questions.length){report.recommendations.push('建议为所有题目添加标准答案');}if(validation.statistics.withSolutions<questions.length*0.8){report.recommendations.push('建议为更多题目添加解题思路');}if(validation.issues.length>0){report.recommendations.push('请检查并修复发现的问题');}return report;};/**\n * 导出解析统计\n */export const getParseStatistics=questions=>{const stats={total:questions.length,byType:{},byCategory:{},quality:{withAnswers:0,withSolutions:0,averageTextLength:0,averageAnswerLength:0}};let totalTextLength=0;let totalAnswerLength=0;questions.forEach(question=>{// 按类型统计\nstats.byType[question.questionType]=(stats.byType[question.questionType]||0)+1;// 按分类统计\nconst categories=question.tags.filter(tag=>['计算','计数','几何','数论','应用题','行程','组合'].includes(tag));categories.forEach(category=>{stats.byCategory[category]=(stats.byCategory[category]||0)+1;});// 质量统计\ntotalTextLength+=question.questionText.length;if(question.answer){stats.quality.withAnswers++;totalAnswerLength+=question.answer.length;}if(question.solutionSteps&&question.solutionSteps.trim()){stats.quality.withSolutions++;}});stats.quality.averageTextLength=questions.length>0?Math.round(totalTextLength/questions.length):0;stats.quality.averageAnswerLength=stats.quality.withAnswers>0?Math.round(totalAnswerLength/stats.quality.withAnswers):0;return stats;};/**\n * 检测重复题目\n */export const detectDuplicates=(newQuestions,existingQuestions)=>{const duplicates=[];const uniqueQuestions=[];newQuestions.forEach((newQ,index)=>{const isExisting=existingQuestions.some(existingQ=>isSimilarQuestion(newQ,existingQ));const isDuplicateInBatch=uniqueQuestions.some(uniqueQ=>isSimilarQuestion(newQ,uniqueQ));if(isExisting||isDuplicateInBatch){duplicates.push({index,question:newQ,reason:isExisting?'exists_in_database':'duplicate_in_batch'});}else{uniqueQuestions.push(newQ);}});return{duplicates,uniqueQuestions,duplicateCount:duplicates.length,uniqueCount:uniqueQuestions.length};};/**\n * 判断两个题目是否相似\n */const isSimilarQuestion=(q1,q2)=>{// 简单的相似度检测：比较题目开头30个字符\nconst text1=q1.questionText.substring(0,30).replace(/\\s+/g,'');const text2=q2.questionText.substring(0,30).replace(/\\s+/g,'');return text1===text2;};/**\n * 预处理Markdown文档\n */export const preprocessMarkdown=markdownText=>{if(!markdownText||typeof markdownText!=='string'){return'';}return markdownText// 统一换行符\n.replace(/\\r\\n/g,'\\n').replace(/\\r/g,'\\n')// 清理多余的空行\n.replace(/\\n{3,}/g,'\\n\\n')// 统一标题格式\n.replace(/^#+\\s*/gm,'## ')// 清理行首空格\n.replace(/^\\s+/gm,'')// 清理行尾空格\n.replace(/\\s+$/gm,'').trim();};/**\n * 提取文档元信息\n */export const extractDocumentMeta=markdownText=>{const meta={hasQuestions:false,questionCount:0,hasAnswers:false,hasSolutions:false,estimatedProcessingTime:0,detectedPatterns:[]};if(!markdownText)return meta;// 检测题目模式\nMARKDOWN_PATTERNS.questionPatterns.forEach((pattern,index)=>{const matches=markdownText.match(new RegExp(pattern.source,'gm'));if(matches&&matches.length>0){meta.hasQuestions=true;meta.questionCount=Math.max(meta.questionCount,matches.length);meta.detectedPatterns.push({pattern:index,matches:matches.length,examples:matches.slice(0,3)});}});// 检测答案\nMARKDOWN_PATTERNS.answerPatterns.forEach(pattern=>{const matches=markdownText.match(new RegExp(pattern.source,'gm'));if(matches&&matches.length>0){meta.hasAnswers=true;}});// 检测解题思路\nmeta.hasSolutions=MARKDOWN_PATTERNS.solutionKeywords.some(keyword=>markdownText.includes(keyword));// 估算处理时间（毫秒）\nmeta.estimatedProcessingTime=Math.max(100,markdownText.length/100);return meta;};/**\n * 修复常见的格式问题\n */export const fixCommonFormatIssues=markdownText=>{return markdownText// 修复题目编号格式\n.replace(/例(\\d+)[\\.．：:]/g,'例$1. ').replace(/习题(\\d+)[\\.．：:]/g,'习题$1. ')// 修复答案格式\n.replace(/答案[：:]\\s*/g,'答案: ').replace(/最终答案[：:]\\s*/g,'最终答案: ')// 修复标题格式\n.replace(/^([例习]\\d+[\\.．：:].*)/gm,'## $1')// 修复解题思路格式\n.replace(/解题思路[：:]?\\s*/g,'### 解题思路\\n')// 修复中文标点\n.replace(/，\\s*/g,'，').replace(/。\\s*/g,'。').replace(/；\\s*/g,'；')// 清理多余空格\n.replace(/\\s+/g,' ').replace(/\\n\\s+/g,'\\n');};/**\n * 智能分段处理\n */export const intelligentSegmentation=markdownText=>{const segments=[];const lines=markdownText.split('\\n');let currentSegment=[];let segmentType='unknown';lines.forEach(line=>{const trimmedLine=line.trim();if(!trimmedLine){if(currentSegment.length>0){currentSegment.push('');}return;}// 检测新的题目段落\nconst isQuestionStart=matchQuestionPattern(trimmedLine);if(isQuestionStart){// 保存当前段落\nif(currentSegment.length>0){segments.push({type:segmentType,content:currentSegment.join('\\n'),lineCount:currentSegment.length});}// 开始新段落\ncurrentSegment=[trimmedLine];segmentType='question';return;}// 添加到当前段落\ncurrentSegment.push(trimmedLine);});// 保存最后一个段落\nif(currentSegment.length>0){segments.push({type:segmentType,content:currentSegment.join('\\n'),lineCount:currentSegment.length});}return segments;};","map":{"version":3,"names":["MARKDOWN_PATTERNS","QUESTION_TYPES","parseMarkdownQuestions","markdownText","baseTags","arguments","length","undefined","console","log","warn","lines","split","questions","currentQuestion","currentSection","lineNumber","concat","line","trimmedLine","trim","questionMatch","matchQuestionPattern","isValidQuestion","processedQuestion","processQuestion","push","questionType","type","questionText","content","answer","solutionSteps","rawLine","startLine","isSolutionSection","answerMatch","matchAnswerPattern","substring","isContentLine","processContentLine","pattern","questionPatterns","match","fullMatch","answerPatterns","replace","solutionKeywords","some","keyword","includes","excludePatterns","test","question","section","hasValidType","hasContent","rawQuestion","cleanText","tags","createdAt","Date","toISOString","metadata","parsedAt","originalLength","text","validateParseResult","validation","isValid","totalQuestions","issues","statistics","byType","averageLength","withAnswers","withSolutions","totalLength","forEach","index","Math","round","generateParseReport","originalText","report","timestamp","input","lineCount","output","questionCount","successRate","recommendations","getParseStatistics","stats","total","byCategory","quality","averageTextLength","averageAnswerLength","totalTextLength","totalAnswerLength","categories","filter","tag","category","detectDuplicates","newQuestions","existingQuestions","duplicates","uniqueQuestions","newQ","isExisting","existingQ","isSimilarQuestion","isDuplicateInBatch","uniqueQ","reason","duplicateCount","uniqueCount","q1","q2","text1","text2","preprocessMarkdown","extractDocumentMeta","meta","hasQuestions","hasAnswers","hasSolutions","estimatedProcessingTime","detectedPatterns","matches","RegExp","source","max","examples","slice","fixCommonFormatIssues","intelligentSegmentation","segments","currentSegment","segmentType","isQuestionStart","join"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/quiz/src/utils/markdownParser.js"],"sourcesContent":["// src/utils/markdownParser.js\n// Markdown解析引擎 - 专门解析AI生成的题目文档\n\nimport { MARKDOWN_PATTERNS, QUESTION_TYPES } from './constants.js';\n\n/**\n * 解析Markdown文档，提取题目信息\n * @param {string} markdownText - Markdown文档内容\n * @param {string[]} baseTags - 基础标签（课程信息）\n * @returns {Object[]} - 解析出的题目数组\n */\nexport const parseMarkdownQuestions = (markdownText, baseTags = []) => {\n  console.log('📖 开始解析Markdown文档');\n  console.log('📝 文档长度:', markdownText.length);\n  console.log('🏷️ 基础标签:', baseTags);\n\n  if (!markdownText || typeof markdownText !== 'string') {\n    console.warn('❌ 输入文档为空或格式错误');\n    return [];\n  }\n\n  const lines = markdownText.split('\\n');\n  const questions = [];\n  \n  let currentQuestion = null;\n  let currentSection = 'question'; // question, solution, answer\n  let lineNumber = 0;\n\n  console.log(`📄 总行数: ${lines.length}`);\n\n  for (const line of lines) {\n    lineNumber++;\n    const trimmedLine = line.trim();\n    \n    // 跳过空行\n    if (!trimmedLine) continue;\n\n    // 检查是否是新题目开始\n    const questionMatch = matchQuestionPattern(trimmedLine);\n    \n    if (questionMatch) {\n      // 保存上一道题目\n      if (currentQuestion && isValidQuestion(currentQuestion)) {\n        const processedQuestion = processQuestion(currentQuestion, baseTags);\n        questions.push(processedQuestion);\n        console.log(`✅ 完成题目: ${processedQuestion.questionType}`);\n      }\n\n      // 开始新题目\n      console.log(`🆕 发现新题目: ${questionMatch.type} (行 ${lineNumber})`);\n      currentQuestion = {\n        questionType: questionMatch.type,\n        questionText: questionMatch.content || '',\n        answer: '',\n        solutionSteps: '',\n        rawLine: trimmedLine,\n        startLine: lineNumber\n      };\n      currentSection = 'question';\n      continue;\n    }\n\n    // 如果没有当前题目，跳过这行\n    if (!currentQuestion) continue;\n\n    // 检查解题思路标识\n    if (isSolutionSection(trimmedLine)) {\n      console.log(`💡 进入解题思路部分 (行 ${lineNumber})`);\n      currentSection = 'solution';\n      continue;\n    }\n\n    // 检查答案标识\n    const answerMatch = matchAnswerPattern(trimmedLine);\n    if (answerMatch) {\n      console.log(`✅ 找到答案 (行 ${lineNumber}): ${answerMatch.substring(0, 50)}...`);\n      currentQuestion.answer = answerMatch;\n      continue;\n    }\n\n    // 处理普通内容行\n    if (isContentLine(trimmedLine)) {\n      processContentLine(currentQuestion, trimmedLine, currentSection);\n    }\n  }\n\n  // 处理最后一道题目\n  if (currentQuestion && isValidQuestion(currentQuestion)) {\n    const processedQuestion = processQuestion(currentQuestion, baseTags);\n    questions.push(processedQuestion);\n    console.log(`✅ 完成最后一题: ${processedQuestion.questionType}`);\n  }\n\n  console.log(`🎉 解析完成! 共解析出 ${questions.length} 道题目`);\n  return questions;\n};\n\n/**\n * 匹配题目模式\n */\nconst matchQuestionPattern = (line) => {\n  for (const pattern of MARKDOWN_PATTERNS.questionPatterns) {\n    const match = line.match(pattern);\n    if (match) {\n      return {\n        type: match[1],           // 例1, 习题1等\n        content: match[2] || '',  // 题目内容\n        fullMatch: match[0]\n      };\n    }\n  }\n  return null;\n};\n\n/**\n * 匹配答案模式\n */\nconst matchAnswerPattern = (line) => {\n  for (const pattern of MARKDOWN_PATTERNS.answerPatterns) {\n    const match = line.match(pattern);\n    if (match) {\n      return match[1].replace(/\\*+/g, '').trim();\n    }\n  }\n  return null;\n};\n\n/**\n * 检查是否是解题思路部分\n */\nconst isSolutionSection = (line) => {\n  return MARKDOWN_PATTERNS.solutionKeywords.some(keyword => \n    line.includes(keyword)\n  );\n};\n\n/**\n * 检查是否是有效的内容行\n */\nconst isContentLine = (line) => {\n  // 排除Markdown标记行\n  const excludePatterns = [\n    /^#+\\s/,           // 标题行\n    /^-{3,}$/,         // 分隔线\n    /^\\*{3,}$/,        // 分隔线\n    /^={3,}$/,         // 分隔线\n    /^\\s*$/            // 空行\n  ];\n\n  return !excludePatterns.some(pattern => pattern.test(line)) && \n         line.length > 2;\n};\n\n/**\n * 处理内容行\n */\nconst processContentLine = (question, line, section) => {\n  if (section === 'solution') {\n    question.solutionSteps += line + '\\n';\n  } else if (section === 'question') {\n    // 如果题目文字为空，这是第一行\n    if (!question.questionText || question.questionText.trim() === '') {\n      question.questionText = line;\n    } else {\n      // 否则追加到题目内容（用空格连接）\n      question.questionText += ' ' + line;\n    }\n  }\n};\n\n/**\n * 验证题目是否有效\n */\nconst isValidQuestion = (question) => {\n  const hasValidType = QUESTION_TYPES.includes(question.questionType);\n  const hasContent = question.questionText && question.questionText.trim().length > 5;\n  \n  if (!hasValidType) {\n    console.warn(`⚠️ 无效的题目类型: ${question.questionType}`);\n  }\n  \n  if (!hasContent) {\n    console.warn(`⚠️ 题目内容过短或为空: ${question.questionText}`);\n  }\n  \n  return hasValidType && hasContent;\n};\n\n/**\n * 处理题目，添加基础信息\n */\nconst processQuestion = (rawQuestion, baseTags) => {\n  return {\n    questionType: rawQuestion.questionType,\n    questionText: cleanText(rawQuestion.questionText),\n    answer: cleanText(rawQuestion.answer),\n    solutionSteps: cleanText(rawQuestion.solutionSteps),\n    tags: [...baseTags], // 使用传入的基础标签\n    createdAt: new Date().toISOString(),\n    metadata: {\n      parsedAt: new Date().toISOString(),\n      startLine: rawQuestion.startLine,\n      originalLength: rawQuestion.questionText.length\n    }\n  };\n};\n\n/**\n * 清理文本内容\n */\nconst cleanText = (text) => {\n  if (!text || typeof text !== 'string') return '';\n  \n  return text\n    .trim()                          // 去除首尾空格\n    .replace(/\\*+/g, '')            // 去除Markdown粗体标记\n    .replace(/_{2,}/g, '')          // 去除下划线\n    .replace(/\\s+/g, ' ')           // 合并多个空格\n    .replace(/\\n\\s*\\n/g, '\\n')      // 合并多个换行\n    .trim();\n};\n\n/**\n * 验证解析结果\n */\nexport const validateParseResult = (questions) => {\n  const validation = {\n    isValid: true,\n    totalQuestions: questions.length,\n    issues: [],\n    statistics: {\n      byType: {},\n      averageLength: 0,\n      withAnswers: 0,\n      withSolutions: 0\n    }\n  };\n\n  let totalLength = 0;\n\n  questions.forEach((question, index) => {\n    // 统计题目类型\n    validation.statistics.byType[question.questionType] = \n      (validation.statistics.byType[question.questionType] || 0) + 1;\n\n    // 统计长度\n    totalLength += question.questionText.length;\n\n    // 统计答案和解题思路\n    if (question.answer && question.answer.trim()) {\n      validation.statistics.withAnswers++;\n    }\n    \n    if (question.solutionSteps && question.solutionSteps.trim()) {\n      validation.statistics.withSolutions++;\n    }\n\n    // 检查问题\n    if (question.questionText.length < 10) {\n      validation.issues.push(`题目 ${index + 1} 内容过短`);\n    }\n    \n    if (!question.answer || !question.answer.trim()) {\n      validation.issues.push(`题目 ${index + 1} 缺少答案`);\n    }\n    \n    if (question.tags.length === 0) {\n      validation.issues.push(`题目 ${index + 1} 缺少标签`);\n    }\n  });\n\n  validation.statistics.averageLength = questions.length > 0 \n    ? Math.round(totalLength / questions.length) \n    : 0;\n\n  validation.isValid = validation.issues.length === 0;\n\n  return validation;\n};\n\n/**\n * 生成解析报告\n */\nexport const generateParseReport = (questions, originalText) => {\n  const validation = validateParseResult(questions);\n  \n  const report = {\n    timestamp: new Date().toISOString(),\n    input: {\n      originalLength: originalText.length,\n      lineCount: originalText.split('\\n').length\n    },\n    output: {\n      questionCount: questions.length,\n      successRate: questions.length > 0 ? '100%' : '0%'\n    },\n    validation,\n    recommendations: []\n  };\n\n  // 生成建议\n  if (validation.statistics.withAnswers < questions.length) {\n    report.recommendations.push('建议为所有题目添加标准答案');\n  }\n  \n  if (validation.statistics.withSolutions < questions.length * 0.8) {\n    report.recommendations.push('建议为更多题目添加解题思路');\n  }\n  \n  if (validation.issues.length > 0) {\n    report.recommendations.push('请检查并修复发现的问题');\n  }\n\n  return report;\n};\n\n/**\n * 导出解析统计\n */\nexport const getParseStatistics = (questions) => {\n  const stats = {\n    total: questions.length,\n    byType: {},\n    byCategory: {},\n    quality: {\n      withAnswers: 0,\n      withSolutions: 0,\n      averageTextLength: 0,\n      averageAnswerLength: 0\n    }\n  };\n\n  let totalTextLength = 0;\n  let totalAnswerLength = 0;\n\n  questions.forEach(question => {\n    // 按类型统计\n    stats.byType[question.questionType] = (stats.byType[question.questionType] || 0) + 1;\n\n    // 按分类统计\n    const categories = question.tags.filter(tag => \n      ['计算', '计数', '几何', '数论', '应用题', '行程', '组合'].includes(tag)\n    );\n    categories.forEach(category => {\n      stats.byCategory[category] = (stats.byCategory[category] || 0) + 1;\n    });\n\n    // 质量统计\n    totalTextLength += question.questionText.length;\n    if (question.answer) {\n      stats.quality.withAnswers++;\n      totalAnswerLength += question.answer.length;\n    }\n    if (question.solutionSteps && question.solutionSteps.trim()) {\n      stats.quality.withSolutions++;\n    }\n  });\n\n  stats.quality.averageTextLength = questions.length > 0 \n    ? Math.round(totalTextLength / questions.length) \n    : 0;\n  \n  stats.quality.averageAnswerLength = stats.quality.withAnswers > 0 \n    ? Math.round(totalAnswerLength / stats.quality.withAnswers)\n    : 0;\n\n  return stats;\n};\n\n/**\n * 检测重复题目\n */\nexport const detectDuplicates = (newQuestions, existingQuestions) => {\n  const duplicates = [];\n  const uniqueQuestions = [];\n\n  newQuestions.forEach((newQ, index) => {\n    const isExisting = existingQuestions.some(existingQ => \n      isSimilarQuestion(newQ, existingQ)\n    );\n    \n    const isDuplicateInBatch = uniqueQuestions.some(uniqueQ => \n      isSimilarQuestion(newQ, uniqueQ)\n    );\n\n    if (isExisting || isDuplicateInBatch) {\n      duplicates.push({\n        index,\n        question: newQ,\n        reason: isExisting ? 'exists_in_database' : 'duplicate_in_batch'\n      });\n    } else {\n      uniqueQuestions.push(newQ);\n    }\n  });\n\n  return {\n    duplicates,\n    uniqueQuestions,\n    duplicateCount: duplicates.length,\n    uniqueCount: uniqueQuestions.length\n  };\n};\n\n/**\n * 判断两个题目是否相似\n */\nconst isSimilarQuestion = (q1, q2) => {\n  // 简单的相似度检测：比较题目开头30个字符\n  const text1 = q1.questionText.substring(0, 30).replace(/\\s+/g, '');\n  const text2 = q2.questionText.substring(0, 30).replace(/\\s+/g, '');\n  \n  return text1 === text2;\n};\n\n/**\n * 预处理Markdown文档\n */\nexport const preprocessMarkdown = (markdownText) => {\n  if (!markdownText || typeof markdownText !== 'string') {\n    return '';\n  }\n\n  return markdownText\n    // 统一换行符\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/\\r/g, '\\n')\n    \n    // 清理多余的空行\n    .replace(/\\n{3,}/g, '\\n\\n')\n    \n    // 统一标题格式\n    .replace(/^#+\\s*/gm, '## ')\n    \n    // 清理行首空格\n    .replace(/^\\s+/gm, '')\n    \n    // 清理行尾空格\n    .replace(/\\s+$/gm, '')\n    \n    .trim();\n};\n\n/**\n * 提取文档元信息\n */\nexport const extractDocumentMeta = (markdownText) => {\n  const meta = {\n    hasQuestions: false,\n    questionCount: 0,\n    hasAnswers: false,\n    hasSolutions: false,\n    estimatedProcessingTime: 0,\n    detectedPatterns: []\n  };\n\n  if (!markdownText) return meta;\n\n  // 检测题目模式\n  MARKDOWN_PATTERNS.questionPatterns.forEach((pattern, index) => {\n    const matches = markdownText.match(new RegExp(pattern.source, 'gm'));\n    if (matches && matches.length > 0) {\n      meta.hasQuestions = true;\n      meta.questionCount = Math.max(meta.questionCount, matches.length);\n      meta.detectedPatterns.push({\n        pattern: index,\n        matches: matches.length,\n        examples: matches.slice(0, 3)\n      });\n    }\n  });\n\n  // 检测答案\n  MARKDOWN_PATTERNS.answerPatterns.forEach(pattern => {\n    const matches = markdownText.match(new RegExp(pattern.source, 'gm'));\n    if (matches && matches.length > 0) {\n      meta.hasAnswers = true;\n    }\n  });\n\n  // 检测解题思路\n  meta.hasSolutions = MARKDOWN_PATTERNS.solutionKeywords.some(keyword => \n    markdownText.includes(keyword)\n  );\n\n  // 估算处理时间（毫秒）\n  meta.estimatedProcessingTime = Math.max(100, markdownText.length / 100);\n\n  return meta;\n};\n\n/**\n * 修复常见的格式问题\n */\nexport const fixCommonFormatIssues = (markdownText) => {\n  return markdownText\n    // 修复题目编号格式\n    .replace(/例(\\d+)[\\.．：:]/g, '例$1. ')\n    .replace(/习题(\\d+)[\\.．：:]/g, '习题$1. ')\n    \n    // 修复答案格式\n    .replace(/答案[：:]\\s*/g, '答案: ')\n    .replace(/最终答案[：:]\\s*/g, '最终答案: ')\n    \n    // 修复标题格式\n    .replace(/^([例习]\\d+[\\.．：:].*)/gm, '## $1')\n    \n    // 修复解题思路格式\n    .replace(/解题思路[：:]?\\s*/g, '### 解题思路\\n')\n    \n    // 修复中文标点\n    .replace(/，\\s*/g, '，')\n    .replace(/。\\s*/g, '。')\n    .replace(/；\\s*/g, '；')\n    \n    // 清理多余空格\n    .replace(/\\s+/g, ' ')\n    .replace(/\\n\\s+/g, '\\n');\n};\n\n/**\n * 智能分段处理\n */\nexport const intelligentSegmentation = (markdownText) => {\n  const segments = [];\n  const lines = markdownText.split('\\n');\n  let currentSegment = [];\n  let segmentType = 'unknown';\n\n  lines.forEach(line => {\n    const trimmedLine = line.trim();\n    \n    if (!trimmedLine) {\n      if (currentSegment.length > 0) {\n        currentSegment.push('');\n      }\n      return;\n    }\n\n    // 检测新的题目段落\n    const isQuestionStart = matchQuestionPattern(trimmedLine);\n    if (isQuestionStart) {\n      // 保存当前段落\n      if (currentSegment.length > 0) {\n        segments.push({\n          type: segmentType,\n          content: currentSegment.join('\\n'),\n          lineCount: currentSegment.length\n        });\n      }\n      \n      // 开始新段落\n      currentSegment = [trimmedLine];\n      segmentType = 'question';\n      return;\n    }\n\n    // 添加到当前段落\n    currentSegment.push(trimmedLine);\n  });\n\n  // 保存最后一个段落\n  if (currentSegment.length > 0) {\n    segments.push({\n      type: segmentType,\n      content: currentSegment.join('\\n'),\n      lineCount: currentSegment.length\n    });\n  }\n\n  return segments;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}