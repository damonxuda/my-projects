{"ast":null,"code":"var _jsxFileName = \"/Users/damonxu/Documents/GitHub/my-projects/quiz/src/contexts/AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthProvider.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../services/SupabaseConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 获取当前用户会话\n    const getSession = async () => {\n      var _session$user;\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserProfile(session.user.id);\n      }\n      setLoading(false);\n    };\n    getSession();\n\n    // 监听认证状态变化\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user2, _session$user3;\n      console.log('Auth state changed:', event, session === null || session === void 0 ? void 0 : (_session$user2 = session.user) === null || _session$user2 === void 0 ? void 0 : _session$user2.email);\n      setUser((_session$user3 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user3 !== void 0 ? _session$user3 : null);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserProfile(session.user.id);\n\n        // 如果是新用户登录且没有 profile，创建一个\n        if (event === 'SIGNED_IN') {\n          await ensureUserProfile(session.user);\n        }\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // 获取用户档案信息\n  const fetchUserProfile = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116 = 没有找到记录\n        console.error('Error fetching user profile:', error);\n      } else {\n        setUserProfile(data);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  // 确保用户有 profile 记录\n  const ensureUserProfile = async user => {\n    if (!user) return;\n    try {\n      // 先检查是否已存在\n      const {\n        data: existing\n      } = await supabase.from('user_profiles').select('id').eq('id', user.id).single();\n      if (!existing) {\n        // 不存在则创建\n        console.log('Creating user profile for:', user.email);\n        const {\n          data,\n          error\n        } = await supabase.from('user_profiles').insert([{\n          id: user.id,\n          email: user.email,\n          status: 'pending',\n          requested_at: new Date().toISOString()\n        }]).select().single();\n        if (error) {\n          console.error('Error creating user profile:', error);\n        } else {\n          console.log('User profile created successfully:', data);\n          setUserProfile(data);\n        }\n      }\n    } catch (error) {\n      console.error('Error ensuring user profile:', error);\n    }\n  };\n\n  // 用户注册\n  const signUp = async (email, password) => {\n    try {\n      console.log('Starting signup for:', email);\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (error) throw error;\n\n      // 注册成功后，profile 会在 onAuthStateChange 中创建\n      console.log('Signup successful:', data);\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // 用户登录\n  const signIn = async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return {\n        data,\n        error\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n\n  // 用户登出\n  const signOut = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    return {\n      error\n    };\n  };\n\n  // 发送密码重置邮件\n  const resetPassword = async email => {\n    try {\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/quiz/reset-password`\n      });\n      return {\n        error\n      };\n    } catch (error) {\n      return {\n        error\n      };\n    }\n  };\n\n  // 检查用户是否已批准\n  const isUserApproved = () => {\n    return (userProfile === null || userProfile === void 0 ? void 0 : userProfile.status) === 'approved';\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return (userProfile === null || userProfile === void 0 ? void 0 : userProfile.status) === 'approved' && (userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'admin';\n  };\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    isUserApproved,\n    isAdmin,\n    fetchUserProfile,\n    ensureUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"WycvliXlKHiFjN+6Nj63IB/wNNM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","userProfile","setUserProfile","loading","setLoading","getSession","_session$user","data","session","auth","fetchUserProfile","id","subscription","onAuthStateChange","event","_session$user2","_session$user3","console","log","email","ensureUserProfile","unsubscribe","userId","error","from","select","eq","single","code","existing","insert","status","requested_at","Date","toISOString","signUp","password","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","isUserApproved","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/quiz/src/contexts/AuthProvider.js"],"sourcesContent":["// src/contexts/AuthProvider.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../services/SupabaseConfig';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 获取当前用户会话\n    const getSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setUser(session?.user ?? null);\n      \n      if (session?.user) {\n        await fetchUserProfile(session.user.id);\n      }\n      setLoading(false);\n    };\n\n    getSession();\n\n    // 监听认证状态变化\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        setUser(session?.user ?? null);\n        \n        if (session?.user) {\n          await fetchUserProfile(session.user.id);\n          \n          // 如果是新用户登录且没有 profile，创建一个\n          if (event === 'SIGNED_IN') {\n            await ensureUserProfile(session.user);\n          }\n        } else {\n          setUserProfile(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // 获取用户档案信息\n  const fetchUserProfile = async (userId) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = 没有找到记录\n        console.error('Error fetching user profile:', error);\n      } else {\n        setUserProfile(data);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  // 确保用户有 profile 记录\n  const ensureUserProfile = async (user) => {\n    if (!user) return;\n\n    try {\n      // 先检查是否已存在\n      const { data: existing } = await supabase\n        .from('user_profiles')\n        .select('id')\n        .eq('id', user.id)\n        .single();\n\n      if (!existing) {\n        // 不存在则创建\n        console.log('Creating user profile for:', user.email);\n        const { data, error } = await supabase\n          .from('user_profiles')\n          .insert([\n            {\n              id: user.id,\n              email: user.email,\n              status: 'pending',\n              requested_at: new Date().toISOString(),\n            }\n          ])\n          .select()\n          .single();\n\n        if (error) {\n          console.error('Error creating user profile:', error);\n        } else {\n          console.log('User profile created successfully:', data);\n          setUserProfile(data);\n        }\n      }\n    } catch (error) {\n      console.error('Error ensuring user profile:', error);\n    }\n  };\n\n  // 用户注册\n  const signUp = async (email, password) => {\n    try {\n      console.log('Starting signup for:', email);\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      // 注册成功后，profile 会在 onAuthStateChange 中创建\n      console.log('Signup successful:', data);\n      return { data, error: null };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { data: null, error };\n    }\n  };\n\n  // 用户登录\n  const signIn = async (email, password) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      return { data, error };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  // 用户登出\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    return { error };\n  };\n\n  // 发送密码重置邮件\n  const resetPassword = async (email) => {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/quiz/reset-password`,\n      });\n      return { error };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  // 检查用户是否已批准\n  const isUserApproved = () => {\n    return userProfile?.status === 'approved';\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return userProfile?.status === 'approved' && userProfile?.role === 'admin';\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n    isUserApproved,\n    isAdmin,\n    fetchUserProfile,\n    ensureUserProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}