{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});const PostgrestQueryBuilder_1=__importDefault(require(\"./PostgrestQueryBuilder\"));const PostgrestFilterBuilder_1=__importDefault(require(\"./PostgrestFilterBuilder\"));const constants_1=require(\"./constants\");/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */class PostgrestClient{// TODO: Add back shouldThrowOnError once we figure out the typings\n/**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */constructor(url){let{headers={},schema,fetch}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.url=url;this.headers=Object.assign(Object.assign({},constants_1.DEFAULT_HEADERS),headers);this.schemaName=schema;this.fetch=fetch;}/**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */from(relation){const url=new URL(\"\".concat(this.url,\"/\").concat(relation));return new PostgrestQueryBuilder_1.default(url,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch});}/**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */schema(schema){return new PostgrestClient(this.url,{headers:this.headers,schema,fetch:this.fetch});}/**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */rpc(fn){let args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let{head=false,get=false,count}=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};let method;const url=new URL(\"\".concat(this.url,\"/rpc/\").concat(fn));let body;if(head||get){method=head?'HEAD':'GET';Object.entries(args)// params with undefined value needs to be filtered out, otherwise it'll\n// show up as `?param=undefined`\n.filter(_ref=>{let[_,value]=_ref;return value!==undefined;})// array values need special syntax\n.map(_ref2=>{let[name,value]=_ref2;return[name,Array.isArray(value)?\"{\".concat(value.join(','),\"}\"):\"\".concat(value)];}).forEach(_ref3=>{let[name,value]=_ref3;url.searchParams.append(name,value);});}else{method='POST';body=args;}const headers=Object.assign({},this.headers);if(count){headers['Prefer']=\"count=\".concat(count);}return new PostgrestFilterBuilder_1.default({method,url,headers,schema:this.schemaName,body,fetch:this.fetch,allowEmpty:false});}}exports.default=PostgrestClient;","map":{"version":3,"names":["PostgrestQueryBuilder_1","__importDefault","require","PostgrestFilterBuilder_1","constants_1","PostgrestClient","constructor","url","headers","schema","fetch","arguments","length","undefined","Object","assign","DEFAULT_HEADERS","schemaName","from","relation","URL","concat","default","rpc","fn","args","head","get","count","method","body","entries","filter","_ref","_","value","map","_ref2","name","Array","isArray","join","forEach","_ref3","searchParams","append","allowEmpty","exports"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport PostgrestBuilder from './PostgrestBuilder'\nimport { DEFAULT_HEADERS } from './constants'\nimport { Fetch, GenericSchema } from './types'\n\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  url: string\n  headers: Record<string, string>\n  schemaName?: SchemaName\n  fetch?: Fetch\n\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: SchemaName\n      fetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schemaName = schema\n    this.fetch = fetch\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    const url = new URL(`${this.url}/${relation}`)\n    return new PostgrestQueryBuilder(url, {\n      headers: { ...this.headers },\n      schema: this.schemaName,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    {\n      head = false,\n      get = false,\n      count,\n    }: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns'],\n    FnName,\n    null\n  > {\n    let method: 'HEAD' | 'GET' | 'POST'\n    const url = new URL(`${this.url}/rpc/${fn}`)\n    let body: unknown | undefined\n    if (head || get) {\n      method = head ? 'HEAD' : 'GET'\n      Object.entries(args)\n        // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(([_, value]) => value !== undefined)\n        // array values need special syntax\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n        .forEach(([name, value]) => {\n          url.searchParams.append(name, value)\n        })\n    } else {\n      method = 'POST'\n      body = args\n    }\n\n    const headers = { ...this.headers }\n    if (count) {\n      headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<Fn['Returns']>)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}