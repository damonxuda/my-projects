{"ast":null,"code":"export class FunctionsError extends Error{constructor(message){let name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'FunctionsError';let context=arguments.length>2?arguments[2]:undefined;super(message);this.name=name;this.context=context;}}export class FunctionsFetchError extends FunctionsError{constructor(context){super('Failed to send a request to the Edge Function','FunctionsFetchError',context);}}export class FunctionsRelayError extends FunctionsError{constructor(context){super('Relay Error invoking the Edge Function','FunctionsRelayError',context);}}export class FunctionsHttpError extends FunctionsError{constructor(context){super('Edge Function returned a non-2xx status code','FunctionsHttpError',context);}}// Define the enum for the 'region' property\nexport var FunctionRegion;(function(FunctionRegion){FunctionRegion[\"Any\"]=\"any\";FunctionRegion[\"ApNortheast1\"]=\"ap-northeast-1\";FunctionRegion[\"ApNortheast2\"]=\"ap-northeast-2\";FunctionRegion[\"ApSouth1\"]=\"ap-south-1\";FunctionRegion[\"ApSoutheast1\"]=\"ap-southeast-1\";FunctionRegion[\"ApSoutheast2\"]=\"ap-southeast-2\";FunctionRegion[\"CaCentral1\"]=\"ca-central-1\";FunctionRegion[\"EuCentral1\"]=\"eu-central-1\";FunctionRegion[\"EuWest1\"]=\"eu-west-1\";FunctionRegion[\"EuWest2\"]=\"eu-west-2\";FunctionRegion[\"EuWest3\"]=\"eu-west-3\";FunctionRegion[\"SaEast1\"]=\"sa-east-1\";FunctionRegion[\"UsEast1\"]=\"us-east-1\";FunctionRegion[\"UsWest1\"]=\"us-west-1\";FunctionRegion[\"UsWest2\"]=\"us-west-2\";})(FunctionRegion||(FunctionRegion={}));","map":{"version":3,"names":["FunctionsError","Error","constructor","message","name","arguments","length","undefined","context","FunctionsFetchError","FunctionsRelayError","FunctionsHttpError","FunctionRegion"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/functions-js/src/types.ts"],"sourcesContent":["export type Fetch = typeof fetch\n\n/**\n * Response format\n */\nexport interface FunctionsResponseSuccess<T> {\n  data: T\n  error: null\n  response?: Response\n}\nexport interface FunctionsResponseFailure {\n  data: null\n  error: any\n  response?: Response\n}\nexport type FunctionsResponse<T> = FunctionsResponseSuccess<T> | FunctionsResponseFailure\n\nexport class FunctionsError extends Error {\n  context: any\n  constructor(message: string, name = 'FunctionsError', context?: any) {\n    super(message)\n    this.name = name\n    this.context = context\n  }\n}\n\nexport class FunctionsFetchError extends FunctionsError {\n  constructor(context: any) {\n    super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context)\n  }\n}\n\nexport class FunctionsRelayError extends FunctionsError {\n  constructor(context: any) {\n    super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context)\n  }\n}\n\nexport class FunctionsHttpError extends FunctionsError {\n  constructor(context: any) {\n    super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context)\n  }\n}\n// Define the enum for the 'region' property\nexport enum FunctionRegion {\n  Any = 'any',\n  ApNortheast1 = 'ap-northeast-1',\n  ApNortheast2 = 'ap-northeast-2',\n  ApSouth1 = 'ap-south-1',\n  ApSoutheast1 = 'ap-southeast-1',\n  ApSoutheast2 = 'ap-southeast-2',\n  CaCentral1 = 'ca-central-1',\n  EuCentral1 = 'eu-central-1',\n  EuWest1 = 'eu-west-1',\n  EuWest2 = 'eu-west-2',\n  EuWest3 = 'eu-west-3',\n  SaEast1 = 'sa-east-1',\n  UsEast1 = 'us-east-1',\n  UsWest1 = 'us-west-1',\n  UsWest2 = 'us-west-2',\n}\n\nexport type FunctionInvokeOptions = {\n  /**\n   * Object representing the headers to send with the request.\n   */\n  headers?: { [key: string]: string }\n  /**\n   * The HTTP verb of the request\n   */\n  method?: 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE'\n  /**\n   * The Region to invoke the function in.\n   */\n  region?: FunctionRegion\n  /**\n   * The body of the request.\n   */\n  body?:\n    | File\n    | Blob\n    | ArrayBuffer\n    | FormData\n    | ReadableStream<Uint8Array>\n    | Record<string, any>\n    | string\n}\n"],"mappings":"AAiBA,MAAM,MAAO,CAAAA,cAAe,QAAQ,CAAAC,KAAK,CAEvCC,YAAYC,OAAe,CAAwC,IAAtC,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,gBAAgB,IAAE,CAAAG,OAAa,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CACjE,KAAK,CAACJ,OAAO,CAAC,CACd,IAAI,CAACC,IAAI,CAAGA,IAAI,CAChB,IAAI,CAACI,OAAO,CAAGA,OAAO,CACxB,C,CAGF,MAAM,MAAO,CAAAC,mBAAoB,QAAQ,CAAAT,cAAc,CACrDE,YAAYM,OAAY,EACtB,KAAK,CAAC,+CAA+C,CAAE,qBAAqB,CAAEA,OAAO,CAAC,CACxF,C,CAGF,MAAM,MAAO,CAAAE,mBAAoB,QAAQ,CAAAV,cAAc,CACrDE,YAAYM,OAAY,EACtB,KAAK,CAAC,wCAAwC,CAAE,qBAAqB,CAAEA,OAAO,CAAC,CACjF,C,CAGF,MAAM,MAAO,CAAAG,kBAAmB,QAAQ,CAAAX,cAAc,CACpDE,YAAYM,OAAY,EACtB,KAAK,CAAC,8CAA8C,CAAE,oBAAoB,CAAEA,OAAO,CAAC,CACtF,C,CAEF;AACA,UAAY,CAAAI,cAgBX,CAhBD,UAAYA,cAAc,EACxBA,cAAA,aAAW,CACXA,cAAA,iCAA+B,CAC/BA,cAAA,iCAA+B,CAC/BA,cAAA,yBAAuB,CACvBA,cAAA,iCAA+B,CAC/BA,cAAA,iCAA+B,CAC/BA,cAAA,6BAA2B,CAC3BA,cAAA,6BAA2B,CAC3BA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACrBA,cAAA,uBAAqB,CACvB,CAAC,EAhBWA,cAAc,GAAdA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}