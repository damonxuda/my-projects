{"ast":null,"code":"var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value);});}return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator[\"throw\"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};export const resolveFetch=customFetch=>{let _fetch;if(customFetch){_fetch=customFetch;}else if(typeof fetch==='undefined'){_fetch=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return import('@supabase/node-fetch').then(_ref=>{let{default:fetch}=_ref;return fetch(...args);});};}else{_fetch=fetch;}return function(){return _fetch(...arguments);};};export const resolveResponse=()=>__awaiter(void 0,void 0,void 0,function*(){if(typeof Response==='undefined'){// @ts-ignore\nreturn(yield import('@supabase/node-fetch')).Response;}return Response;});export const recursiveToCamel=item=>{if(Array.isArray(item)){return item.map(el=>recursiveToCamel(el));}else if(typeof item==='function'||item!==Object(item)){return item;}const result={};Object.entries(item).forEach(_ref2=>{let[key,value]=_ref2;const newKey=key.replace(/([-_][a-z])/gi,c=>c.toUpperCase().replace(/[-_]/g,''));result[newKey]=recursiveToCamel(value);});return result;};/**\n * Determine if input is a plain object\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n * source: https://github.com/sindresorhus/is-plain-obj\n */export const isPlainObject=value=>{if(typeof value!=='object'||value===null){return false;}const prototype=Object.getPrototypeOf(value);return(prototype===null||prototype===Object.prototype||Object.getPrototypeOf(prototype)===null)&&!(Symbol.toStringTag in value)&&!(Symbol.iterator in value);};","map":{"version":3,"names":["resolveFetch","customFetch","_fetch","fetch","_len","arguments","length","args","Array","_key","then","_ref","default","resolveResponse","__awaiter","Response","recursiveToCamel","item","isArray","map","el","Object","result","entries","forEach","_ref2","key","value","newKey","replace","c","toUpperCase","isPlainObject","prototype","getPrototypeOf","Symbol","toStringTag","iterator"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/storage-js/src/lib/helpers.ts"],"sourcesContent":["type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async (): Promise<typeof Response> => {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (await import('@supabase/node-fetch' as any)).Response\n  }\n\n  return Response\n}\n\nexport const recursiveToCamel = (item: Record<string, any>): unknown => {\n  if (Array.isArray(item)) {\n    return item.map((el) => recursiveToCamel(el))\n  } else if (typeof item === 'function' || item !== Object(item)) {\n    return item\n  }\n\n  const result: Record<string, any> = {}\n  Object.entries(item).forEach(([key, value]) => {\n    const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''))\n    result[newKey] = recursiveToCamel(value)\n  })\n\n  return result\n}\n\n/**\n * Determine if input is a plain object\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n * source: https://github.com/sindresorhus/is-plain-obj\n */\nexport const isPlainObject = (value: object): boolean => {\n  if (typeof value !== 'object' || value === null) {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return (\n    (prototype === null ||\n      prototype === Object.prototype ||\n      Object.getPrototypeOf(prototype) === null) &&\n    !(Symbol.toStringTag in value) &&\n    !(Symbol.iterator in value)\n  )\n}\n"],"mappings":"ijBAEA,MAAO,MAAM,CAAAA,YAAY,CAAIC,WAAmB,EAAW,CACzD,GAAI,CAAAC,MAAa,CACjB,GAAID,WAAW,CAAE,CACfC,MAAM,CAAGD,WAAW,C,CACrB,IAAM,IAAI,MAAO,CAAAE,KAAK,GAAK,WAAW,CAAE,CACvCD,MAAM,CAAG,QAAAA,CAAA,UAAAE,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAAIC,IAAI,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,SACf,OAAM,CAAC,sBAA6B,CAAC,CAACC,IAAI,CAACC,IAAA,MAAC,CAAEC,OAAO,CAAET,KAAK,CAAE,CAAAQ,IAAA,OAAK,CAAAR,KAAK,CAAC,GAAGI,IAAI,CAAC,GAAC,G,CACrF,IAAM,CACLL,MAAM,CAAGC,KAAK,C,CAEhB,MAAO,kBAAa,CAAAD,MAAM,CAAC,GAAAG,SAAO,CAAC,GACrC,CAAC,CAED,MAAO,MAAM,CAAAQ,eAAe,CAAGA,CAAA,GAAqCC,SAAA,kCAClE,GAAI,MAAO,CAAAC,QAAQ,GAAK,WAAW,CAAE,CACnC;AACA,MAAO,CAAC,KAAM,OAAM,CAAC,sBAA6B,CAAC,EAAEA,QAAQ,C,CAG/D,MAAO,CAAAA,QAAQ,CACjB,CAAC,EAED,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,IAAyB,EAAa,CACrE,GAAIT,KAAK,CAACU,OAAO,CAACD,IAAI,CAAC,CAAE,CACvB,MAAO,CAAAA,IAAI,CAACE,GAAG,CAAEC,EAAE,EAAKJ,gBAAgB,CAACI,EAAE,CAAC,CAAC,C,CAC9C,IAAM,IAAI,MAAO,CAAAH,IAAI,GAAK,UAAU,EAAIA,IAAI,GAAKI,MAAM,CAACJ,IAAI,CAAC,CAAE,CAC9D,MAAO,CAAAA,IAAI,C,CAGb,KAAM,CAAAK,MAAM,CAAwB,EAAE,CACtCD,MAAM,CAACE,OAAO,CAACN,IAAI,CAAC,CAACO,OAAO,CAACC,KAAA,EAAiB,IAAhB,CAACC,GAAG,CAAEC,KAAK,CAAC,CAAAF,KAAA,CACxC,KAAM,CAAAG,MAAM,CAAGF,GAAG,CAACG,OAAO,CAAC,eAAe,CAAGC,CAAC,EAAKA,CAAC,CAACC,WAAW,EAAE,CAACF,OAAO,CAAC,OAAO,CAAE,EAAE,CAAC,CAAC,CACxFP,MAAM,CAACM,MAAM,CAAC,CAAGZ,gBAAgB,CAACW,KAAK,CAAC,CAC1C,CAAC,CAAC,CAEF,MAAO,CAAAL,MAAM,CACf,CAAC,CAED;;;;GAKA,MAAO,MAAM,CAAAU,aAAa,CAAIL,KAAa,EAAa,CACtD,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAIA,KAAK,GAAK,IAAI,CAAE,CAC/C,MAAO,MAAK,C,CAGd,KAAM,CAAAM,SAAS,CAAGZ,MAAM,CAACa,cAAc,CAACP,KAAK,CAAC,CAC9C,MACE,CAACM,SAAS,GAAK,IAAI,EACjBA,SAAS,GAAKZ,MAAM,CAACY,SAAS,EAC9BZ,MAAM,CAACa,cAAc,CAACD,SAAS,CAAC,GAAK,IAAI,GAC3C,EAAEE,MAAM,CAACC,WAAW,GAAI,CAAAT,KAAK,CAAC,EAC9B,EAAEQ,MAAM,CAACE,QAAQ,GAAI,CAAAV,KAAK,CAAC,CAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}