{"ast":null,"code":"/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */export default class Timer{constructor(callback,timerCalc){this.callback=callback;this.timerCalc=timerCalc;this.timer=undefined;this.tries=0;this.callback=callback;this.timerCalc=timerCalc;}reset(){this.tries=0;clearTimeout(this.timer);this.timer=undefined;}// Cancels any previous scheduleTimeout and schedules callback\nscheduleTimeout(){clearTimeout(this.timer);this.timer=setTimeout(()=>{this.tries=this.tries+1;this.callback();},this.timerCalc(this.tries+1));}}","map":{"version":3,"names":["Timer","constructor","callback","timerCalc","timer","undefined","tries","reset","clearTimeout","scheduleTimeout","setTimeout"],"sources":["/Users/damonxu/Documents/GitHub/my-projects/auth/node_modules/@supabase/realtime-js/src/lib/timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n    this.timer = undefined\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;GAYA,cAAc,MAAO,CAAAA,KAAK,CAIxBC,YAAmBC,QAAkB,CAASC,SAAmB,EAA9C,KAAAD,QAAQ,CAARA,QAAQ,CAAmB,KAAAC,SAAS,CAATA,SAAS,CAHvD,KAAAC,KAAK,CAAuBC,SAAS,CACrC,KAAAC,KAAK,CAAW,CAAC,CAGf,IAAI,CAACJ,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,SAAS,CAAGA,SAAS,CAC5B,CAEAI,KAAKA,CAAA,EACH,IAAI,CAACD,KAAK,CAAG,CAAC,CACdE,YAAY,CAAC,IAAI,CAACJ,KAAK,CAAC,CACxB,IAAI,CAACA,KAAK,CAAGC,SAAS,CACxB,CAEA;AACAI,eAAeA,CAAA,EACbD,YAAY,CAAC,IAAI,CAACJ,KAAK,CAAC,CAExB,IAAI,CAACA,KAAK,CAAQM,UAAU,CAAC,IAAK,CAChC,IAAI,CAACJ,KAAK,CAAG,IAAI,CAACA,KAAK,CAAG,CAAC,CAC3B,IAAI,CAACJ,QAAQ,EAAE,CACjB,CAAC,CAAE,IAAI,CAACC,SAAS,CAAC,IAAI,CAACG,KAAK,CAAG,CAAC,CAAC,CAAC,CACpC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}