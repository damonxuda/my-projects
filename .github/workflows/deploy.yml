name: Deploy Multi-Project to AWS S3

# 当推送到 main 分支时触发
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 获取前两个commit用于变化检测

      # 2. 设置 Node.js 环境（React项目需要）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "quiz/package-lock.json"

      # 3. 配置 AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. 检测项目变化
      - name: Detect changed projects
        id: changes
        run: |
          echo "Detecting changes in projects..."

          # 检测 schedule 项目变化
          if git diff --name-only HEAD~1 HEAD | grep -q "^schedule/"; then
            echo "schedule_changed=true" >> $GITHUB_OUTPUT
            echo "✅ Schedule project has changes"
          else
            echo "schedule_changed=false" >> $GITHUB_OUTPUT
            echo "➖ Schedule project has no changes"
          fi

          # 检测 auth 项目变化
          if git diff --name-only HEAD~1 HEAD | grep -q "^auth/"; then
            echo "auth_changed=true" >> $GITHUB_OUTPUT
            echo "✅ Auth project has changes"
          else
            echo "auth_changed=false" >> $GITHUB_OUTPUT
            echo "➖ Auth project has no changes"
          fi

          # 检测 quiz 项目变化
          if git diff --name-only HEAD~1 HEAD | grep -q "^quiz/"; then
            echo "quiz_changed=true" >> $GITHUB_OUTPUT
            echo "✅ Quiz project has changes"
          else
            echo "quiz_changed=false" >> $GITHUB_OUTPUT
            echo "➖ Quiz project has no changes"
          fi

          # 如果auth变化，quiz也需要重新构建（因为quiz依赖auth）
          if [[ "$(cat $GITHUB_OUTPUT | grep auth_changed=true)" ]]; then
            echo "quiz_changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Auth changed, forcing Quiz rebuild"
          fi

          # 检测是否是首次部署或强制部署
          if [[ "${{ github.event.forced }}" == "true" ]] || [[ $(git rev-list --count HEAD) -le 1 ]] || [[ ! $(git diff --name-only HEAD~1 HEAD) ]]; then
            echo "force_deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 Force deploy mode - will deploy all projects"
          else
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi

      # 5. 部署 Schedule 项目（静态文件）
      - name: Deploy Schedule
        if: steps.changes.outputs.schedule_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "🚀 Deploying Schedule to /schedule path..."

          # 同步上传 schedule 项目到 S3 的 schedule 路径
          aws s3 sync ./schedule/ s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ \
            --delete \
            --exclude ".DS_Store" \
            --exclude "*.md" \
            --exclude "README*" \
            --exclude "LICENSE*" \
            --exclude ".env*" \
            --exclude "*.zip" \
            --exclude "*.tar" \
            --exclude "*.gz" \
            --exclude "package*.json" \
            --exclude "tsconfig.json" \
            --exclude "webpack.config.js" \
            --exclude "gulpfile.js" \
            --exclude "Gruntfile.js" \
            --exclude ".gitignore" \
            --exclude ".gitattributes" \
            --exclude ".editorconfig" \
            --exclude ".eslintrc*" \
            --exclude ".prettierrc*" \
            --exclude "*.log"

          echo "✅ Schedule deployed to /schedule path"

      # 6. 构建并部署 Quiz 项目（React应用）
      - name: Build and Deploy Quiz
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "🚀 Building and deploying Quiz Management to /quiz path..."

          # 检查 quiz 目录是否存在
          if [ -d "./quiz" ]; then
            echo "✅ Quiz directory found, starting build process..."
            echo "✅ Quiz Management built and deployed to /quiz path"
          else
            echo "⚠️  Quiz directory not found, skipping deployment"
          fi

      # 6a. Install Quiz Dependencies
      - name: Install Quiz Dependencies
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./quiz
        run: |
          echo "📦 Installing dependencies..."
          npm ci

      # 6b. Build Quiz Application
      - name: Build Quiz Application
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./quiz
        run: |
          echo "🔧 Setting environment variables..."
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env.production
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production

          echo "🏗️ Building React application..."
          npm run build

      # 6c. Deploy Quiz to S3
      - name: Deploy Quiz to S3
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "☁️ Uploading to S3..."
          aws s3 sync ./quiz/build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ \
            --delete \
            --exclude ".DS_Store"
          echo "✅ Quiz Management deployed to /quiz path"

      # 7. 部署根目录文件
      - name: Deploy root files
        run: |
          echo "🚀 Deploying root directory files..."

          # 上传根目录的 index.html（如果存在）
          if [ -f "./index.html" ]; then
            aws s3 cp ./index.html s3://${{ secrets.AWS_S3_BUCKET_NAME }}/index.html
            echo "✅ Root index.html deployed"
          else
            echo "ℹ️  No root index.html found"
          fi

      # 8. 验证部署结果
      - name: Verify deployments
        run: |
          echo "📁 Verifying deployed projects..."

          # 检查根目录 index.html
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/index.html >/dev/null 2>&1; then
            echo "✅ Root index.html found in S3"
          else
            echo "❌ Root index.html not found in S3"
          fi

          # 检查 schedule 部署
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ >/dev/null 2>&1; then
            echo "✅ Schedule files found in S3"
            aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ --recursive | head -5
          else
            echo "❌ Schedule files not found in S3"
          fi

          # 检查 quiz 部署
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ >/dev/null 2>&1; then
            echo "✅ Quiz Management files found in S3"
            aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ --recursive | head -5
          else
            echo "ℹ️  Quiz Management files not found in S3 (may not be created yet)"
          fi

      # 9. 清理缓存（如果使用 CloudFront）
      - name: Invalidate CloudFront cache (optional)
        continue-on-error: true
        run: |
          echo "CloudFront invalidation step (currently disabled)"
          echo "To enable: uncomment and set CLOUDFRONT_DISTRIBUTION_ID secret"
          # 如果启用 CloudFront，取消注释以下代码
          # PATHS_TO_INVALIDATE=""
          # if [[ "${{ steps.changes.outputs.schedule_changed }}" == "true" ]]; then
          #   PATHS_TO_INVALIDATE="${PATHS_TO_INVALIDATE} /schedule/*"
          # fi
          # if [[ "${{ steps.changes.outputs.quiz_changed }}" == "true" ]]; then
          #   PATHS_TO_INVALIDATE="${PATHS_TO_INVALIDATE} /quiz/*"
          # fi
          # if [[ -n "$PATHS_TO_INVALIDATE" ]]; then
          #   aws cloudfront create-invalidation \
          #     --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          #     --paths $PATHS_TO_INVALIDATE
          # fi

      # 10. 部署成功报告
      - name: Deploy Success Report
        run: |
          echo "🎉 多项目部署完成!"
          echo ""
          echo "📊 本次部署摘要:"
          echo "   Schedule 变化: ${{ steps.changes.outputs.schedule_changed }}"
          echo "   Auth 变化: ${{ steps.changes.outputs.auth_changed }}"
          echo "   Quiz 变化: ${{ steps.changes.outputs.quiz_changed }}"
          echo "   强制部署模式: ${{ steps.changes.outputs.force_deploy }}"
          echo ""
          echo "🌐 项目访问地址:"
          echo "   📚 Schedule: http://${{ secrets.AWS_S3_BUCKET_NAME }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com/schedule/"
          echo "   🧠 Quiz Management: http://${{ secrets.AWS_S3_BUCKET_NAME }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com/quiz/"
          echo ""
          echo "✅ 功能特性:"
          echo "   - 智能变化检测：只部署有变化的项目"
          echo "   - React 构建：自动构建quiz项目"
          echo "   - 路径分离：每个项目独立的访问路径"
          echo "   - 依赖检测：auth变化时自动重建quiz"
          echo ""
          echo "📝 下一步建议:"
          echo "   1. 创建 Supabase 项目并配置 GitHub Secrets"
          echo "   2. 测试两个项目的独立访问"
          echo "   3. 考虑配置自定义域名和 HTTPS"
