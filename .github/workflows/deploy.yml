name: Deploy Multi-Project to AWS S3

# ÂΩìÊé®ÈÄÅÂà∞ main ÂàÜÊîØÊó∂Ëß¶Âèë
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Ê£ÄÂá∫‰ª£Á†Å
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Ëé∑ÂèñÂâç‰∏§‰∏™commitÁî®‰∫éÂèòÂåñÊ£ÄÊµã

      # 2. ËÆæÁΩÆ Node.js ÁéØÂ¢ÉÔºàReactÈ°πÁõÆÈúÄË¶ÅÔºâ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "quiz/package-lock.json"

      # 3. ÈÖçÁΩÆ AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. Ê£ÄÊµãÈ°πÁõÆÂèòÂåñ
      - name: Detect changed projects
        id: changes
        run: |
          echo "Detecting changes in projects..."

          # Ê£ÄÊµã schedule È°πÁõÆÂèòÂåñ
          if git diff --name-only HEAD~1 HEAD | grep -q "^schedule/"; then
            echo "schedule_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Schedule project has changes"
          else
            echo "schedule_changed=false" >> $GITHUB_OUTPUT
            echo "‚ûñ Schedule project has no changes"
          fi

          # Ê£ÄÊµã auth-clerk È°πÁõÆÂèòÂåñ
          if git diff --name-only HEAD~1 HEAD | grep -q "^auth-clerk/"; then
            echo "auth_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Auth-clerk project has changes"
          else
            echo "auth_changed=false" >> $GITHUB_OUTPUT
            echo "‚ûñ Auth-clerk project has no changes"
          fi

          # Ê£ÄÊµã shared È°πÁõÆÂèòÂåñ
          if git diff --name-only HEAD~1 HEAD | grep -q "^shared/"; then
            echo "shared_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Shared project has changes"
          else
            echo "shared_changed=false" >> $GITHUB_OUTPUT
            echo "‚ûñ Shared project has no changes"
          fi

          # Ê£ÄÊµã quiz È°πÁõÆÂèòÂåñ
          if git diff --name-only HEAD~1 HEAD | grep -q "^quiz/"; then
            echo "quiz_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Quiz project has changes"
          else
            echo "quiz_changed=false" >> $GITHUB_OUTPUT
            echo "‚ûñ Quiz project has no changes"
          fi

          # Â¶ÇÊûúauth-clerkÊàñsharedÂèòÂåñÔºåquiz‰πüÈúÄË¶ÅÈáçÊñ∞ÊûÑÂª∫ÔºàÂõ†‰∏∫quiz‰æùËµñÂÆÉ‰ª¨Ôºâ
          if [[ "$(cat $GITHUB_OUTPUT | grep -E 'auth_changed=true|shared_changed=true')" ]]; then
            echo "quiz_changed=true" >> $GITHUB_OUTPUT
            echo "üîÑ Auth-clerk or Shared changed, forcing Quiz rebuild"
          fi

          # Ê£ÄÊµãÊòØÂê¶ÊòØÈ¶ñÊ¨°ÈÉ®ÁΩ≤ÊàñÂº∫Âà∂ÈÉ®ÁΩ≤
          if [[ "${{ github.event.forced }}" == "true" ]] || [[ $(git rev-list --count HEAD) -le 1 ]] || [[ ! $(git diff --name-only HEAD~1 HEAD) ]]; then
            echo "force_deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force deploy mode - will deploy all projects"
          else
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi

      # 5. ÈÉ®ÁΩ≤ Schedule È°πÁõÆÔºàÈùôÊÄÅÊñá‰ª∂Ôºâ
      - name: Deploy Schedule
        if: steps.changes.outputs.schedule_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "üöÄ Deploying Schedule to /schedule path..."

          # ÂêåÊ≠•‰∏ä‰º† schedule È°πÁõÆÂà∞ S3 ÁöÑ schedule Ë∑ØÂæÑ
          aws s3 sync ./schedule/ s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ \
            --delete \
            --exclude "*.md" \
            --exclude "README*" \
            --exclude "LICENSE*" \
            --exclude "package*.json" \
            --exclude "*.config.js" \
            --exclude "*.config.json" \
            --exclude ".gitignore" \
            --exclude ".eslintrc*" \
            --exclude ".prettierrc*"

          echo "‚úÖ Schedule deployed to /schedule path"

      # 6. ÊûÑÂª∫Âπ∂ÈÉ®ÁΩ≤ Quiz È°πÁõÆÔºàReactÂ∫îÁî®Ôºâ
      - name: Build and Deploy Quiz
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "üöÄ Building and deploying Quiz Management to /quiz path..."

          # Ê£ÄÊü• quiz ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
          if [ -d "./quiz" ]; then
            echo "‚úÖ Quiz directory found, starting build process..."
            echo "‚úÖ Quiz Management built and deployed to /quiz path"
          else
            echo "‚ö†Ô∏è  Quiz directory not found, skipping deployment"
          fi

      # 6a. Install Quiz Dependencies
      - name: Install Quiz Dependencies
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./quiz
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci

          echo "üì¶ Installing shared dependencies..."
          cd ../shared && npm ci

          echo "üì¶ Installing auth-clerk dependencies..."
          cd ../auth-clerk && npm ci

      # 6b. Build Quiz Application
      - name: Build Quiz Application
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./quiz
        run: |
          echo "üîß Setting environment variables..."
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env.production
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env.production
          echo "REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}" >> .env.production
          echo "REACT_APP_ADMIN_EMAILS=${{ secrets.REACT_APP_ADMIN_EMAILS }}" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production

          echo "üèóÔ∏è Building React application..."
          npm run build

      # 6c. Deploy Quiz to S3
      - name: Deploy Quiz to S3
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "‚òÅÔ∏è Force clearing S3 bucket and uploading fresh files..."
          # ÂÖàÂÆåÂÖ®Âà†Èô§Êï¥‰∏™ quiz ÁõÆÂΩï
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ --recursive
          echo "üóëÔ∏è Cleared existing quiz files"
          # ÁÑ∂ÂêéÈáçÊñ∞‰∏ä‰º†ÔºåËÆæÁΩÆÂº∫Âà∂‰∏çÁºìÂ≠òÁöÑÂ§¥ÈÉ®
          aws s3 sync ./quiz/build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude ".DS_Store"
          echo "‚úÖ Quiz Management forcefully deployed with no-cache headers"

      # 7. È™åËØÅÈÉ®ÁΩ≤ÂíåClerkËÆ§ËØÅ
      - name: Verify Clerk Authentication Setup
        run: |
          echo "üîê === ClerkËÆ§ËØÅÁ≥ªÁªüÈ™åËØÅ ==="
          echo ""
          echo "üîç 1. Ê£ÄÊü• S3 ‰∏äÁöÑ quiz Êñá‰ª∂:"
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ --recursive --summarize
          echo ""
          echo "üîç 2. Ê£ÄÊü• JS Êñá‰ª∂ÁõÆÂΩï:"
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/static/js/
          echo ""
          echo "üîç 3. È™åËØÅÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ:"
          # Ëé∑Âèñ‰∏ªË¶ÅÁöÑ JS Êñá‰ª∂Âêç
          MAIN_JS=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/static/js/ | grep main | awk '{print $4}' | head -1)
          if [ ! -z "$MAIN_JS" ]; then
            echo "ÊâæÂà∞‰∏ªË¶Å JS Êñá‰ª∂: $MAIN_JS"
            echo "‰∏ãËΩΩÂπ∂Ê£ÄÊü•ClerkÈõÜÊàê..."
            aws s3 cp s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/static/js/$MAIN_JS temp_main.js
            echo ""
            echo "üîç 4. Ê£ÄÊü•ClerkÁªÑ‰ª∂ÈõÜÊàê:"
            if grep -q "ClerkAuthProvider\|SignedIn\|SignedOut" temp_main.js; then
              echo "‚úÖ ÊâæÂà∞ClerkËÆ§ËØÅÁªÑ‰ª∂ÔºÅ"
            else
              echo "‚ùå Ê≤°ÊúâÊâæÂà∞ClerkËÆ§ËØÅÁªÑ‰ª∂"
            fi
            echo ""
            echo "üîç 5. Ê£ÄÊü•ÊòØÂê¶ÁßªÈô§‰∫ÜÊóßÁöÑSupabaseËÆ§ËØÅ:"
            if grep -q "AuthProvider.*supabase\|useAuth.*auth-legacy" temp_main.js; then
              echo "‚ö†Ô∏è ‰ªçÁÑ∂ÂåÖÂê´ÊóßÁöÑSupabaseËÆ§ËØÅ‰ª£Á†Å"
            else
              echo "‚úÖ Â∑≤ÊàêÂäüÁßªÈô§ÊóßÁöÑËÆ§ËØÅ‰ª£Á†Å"
            fi
            echo ""
            echo "üîç 6. Ê£ÄÊü•ÁÆ°ÁêÜÂëòÈÇÆÁÆ±ÈÖçÁΩÆ:"
            if grep -q "REACT_APP_ADMIN_EMAILS" temp_main.js; then
              echo "‚úÖ ÊâæÂà∞ÁÆ°ÁêÜÂëòÈÇÆÁÆ±ÈÖçÁΩÆ"
            else
              echo "‚ùå Ê≤°ÊúâÊâæÂà∞ÁÆ°ÁêÜÂëòÈÇÆÁÆ±ÈÖçÁΩÆ"
            fi
          else
            echo "‚ùå Ê≤°ÊúâÊâæÂà∞‰∏ªË¶ÅÁöÑ JS Êñá‰ª∂"
          fi
          echo ""
          echo "üìä === ClerkËÆ§ËØÅÈ™åËØÅÊÄªÁªì ==="

      # 8. ÈÉ®ÁΩ≤Ê†πÁõÆÂΩïÊñá‰ª∂
      - name: Deploy root files
        run: |
          echo "üöÄ Deploying root directory files..."

          # ‰∏ä‰º†Ê†πÁõÆÂΩïÁöÑ index.htmlÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
          if [ -f "./index.html" ]; then
            aws s3 cp ./index.html s3://${{ secrets.AWS_S3_BUCKET_NAME }}/index.html
            echo "‚úÖ Root index.html deployed"
          else
            echo "‚ÑπÔ∏è  No root index.html found"
          fi

      # 9. È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú
      - name: Verify deployments
        run: |
          echo "üìÅ Verifying deployed projects..."

          # Ê£ÄÊü•Ê†πÁõÆÂΩï index.html
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/index.html >/dev/null 2>&1; then
            echo "‚úÖ Root index.html found in S3"
          else
            echo "‚ùå Root index.html not found in S3"
          fi

          # Ê£ÄÊü• schedule ÈÉ®ÁΩ≤
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ >/dev/null 2>&1; then
            echo "‚úÖ Schedule files found in S3"
            aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/schedule/ --recursive | head -5
          else
            echo "‚ùå Schedule files not found in S3"
          fi

          # Ê£ÄÊü• quiz ÈÉ®ÁΩ≤
          if aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ >/dev/null 2>&1; then
            echo "‚úÖ Quiz Management files found in S3"
            aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}/quiz/ --recursive | head -5
          else
            echo "‚ÑπÔ∏è  Quiz Management files not found in S3 (may not be created yet)"
          fi

      # 10. Ê∏ÖÁêÜÁºìÂ≠òÔºàÂ¶ÇÊûú‰ΩøÁî® CloudFrontÔºâ
      - name: Invalidate CloudFront cache (optional)
        continue-on-error: true
        run: |
          echo "CloudFront invalidation step (currently disabled)"
          echo "To enable: uncomment and set CLOUDFRONT_DISTRIBUTION_ID secret"
          # Â¶ÇÊûúÂêØÁî® CloudFrontÔºåÂèñÊ∂àÊ≥®Èáä‰ª•‰∏ã‰ª£Á†Å
          # PATHS_TO_INVALIDATE=""
          # if [[ "${{ steps.changes.outputs.schedule_changed }}" == "true" ]]; then
          #   PATHS_TO_INVALIDATE="${PATHS_TO_INVALIDATE} /schedule/*"
          # fi
          # if [[ "${{ steps.changes.outputs.quiz_changed }}" == "true" ]]; then
          #   PATHS_TO_INVALIDATE="${PATHS_TO_INVALIDATE} /quiz/*"
          # fi
          # if [[ -n "$PATHS_TO_INVALIDATE" ]]; then
          #   aws cloudfront create-invalidation \
          #     --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          #     --paths $PATHS_TO_INVALIDATE
          # fi

      # 11. ÈÉ®ÁΩ≤ÊàêÂäüÊä•Âëä
      - name: Deploy Success Report
        run: |
          echo "üéâ Â§öÈ°πÁõÆÈÉ®ÁΩ≤ÂÆåÊàê - ClerkËÆ§ËØÅÁ≥ªÁªüÂ∑≤ÂêØÁî®!"
          echo ""
          echo "üìä Êú¨Ê¨°ÈÉ®ÁΩ≤ÊëòË¶Å:"
          echo "   Schedule ÂèòÂåñ: ${{ steps.changes.outputs.schedule_changed }}"
          echo "   Auth-clerk ÂèòÂåñ: ${{ steps.changes.outputs.auth_changed }}"
          echo "   Shared ÂèòÂåñ: ${{ steps.changes.outputs.shared_changed }}"
          echo "   Quiz ÂèòÂåñ: ${{ steps.changes.outputs.quiz_changed }}"
          echo "   Âº∫Âà∂ÈÉ®ÁΩ≤Ê®°Âºè: ${{ steps.changes.outputs.force_deploy }}"
          echo ""
          echo "üîê ËÆ§ËØÅÁ≥ªÁªü:"
          echo "   ËÆ§ËØÅÊúçÂä°: Clerk (Êõø‰ª£SupabaseËÆ§ËØÅ)"
          echo "   Áî®Êà∑ÁÆ°ÁêÜ: ÂèåÈáçÈ™åËØÅ (Clerk + ÁÆ°ÁêÜÂëòÂÆ°Êâπ)"
          echo "   Áü•ËØÜ‰∫ßÊùÉ‰øùÊä§: ÂêØÁî®ÂÆ°ÊâπÂà∂ËÆøÈóÆÊéßÂà∂"
          echo ""
          echo "üåê È°πÁõÆËÆøÈóÆÂú∞ÂùÄ:"
          echo "   üìö Schedule: http://${{ secrets.AWS_S3_BUCKET_NAME }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com/schedule/"
          echo "   üß† Quiz Management: http://${{ secrets.AWS_S3_BUCKET_NAME }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com/quiz/"
          echo ""
          echo "‚úÖ ÂäüËÉΩÁâπÊÄß:"
          echo "   - ClerkË∫´‰ªΩËÆ§ËØÅ: ÂÆâÂÖ®ÁöÑÁî®Êà∑Ê≥®ÂÜåÂíåÁôªÂΩï"
          echo "   - Êô∫ËÉΩÂèòÂåñÊ£ÄÊµã: Âè™ÈÉ®ÁΩ≤ÊúâÂèòÂåñÁöÑÈ°πÁõÆ"
          echo "   - Ê®°ÂùóÂåñÊû∂ÊûÑ: auth-clerk + shared + quiz"
          echo "   - ÁÆ°ÁêÜÂëòÊùÉÈôê: Âü∫‰∫éÈÇÆÁÆ±ÁöÑÁÆ°ÁêÜÂëòÊéßÂà∂"
          echo ""
          echo "üìù ‰∏ã‰∏ÄÊ≠•Âª∫ËÆÆ:"
          echo "   1. ‰ΩøÁî®ÁÆ°ÁêÜÂëòÈÇÆÁÆ±ÁôªÂΩïÂπ∂ÊµãËØïÊùÉÈôê"
          echo "   2. ÊµãËØïÁî®Êà∑Ê≥®ÂÜåÂíåÂÆ°ÊâπÊµÅÁ®ã"
          echo "   3. È™åËØÅÈ¢òÂ∫ìËÆøÈóÆÊùÉÈôêÊéßÂà∂"
