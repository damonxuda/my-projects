# .github/workflows/deploy.yml
name: Deploy Multi-Project to AWS S3

on:
  push:
    branches: [main]
    paths:
      - 'quiz/**'
      - 'videos/**'
      - 'admin/**'
      - 'schedule/**'
      - 'auth-clerk/**'
      - 'shared/**'
      - 'games/**'
      - 'index.html'
      - 'favicon.*'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            quiz/package-lock.json
            videos/package-lock.json
            admin/package-lock.json
            auth-clerk/package-lock.json

      # 3. 配置 AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. 检测项目变化（修正版 + admin）
      - name: Detect changed projects
        id: changes
        run: |
          echo "🔍 检测项目变化..."

          # 检测每个项目的变化（添加admin）
          for project in schedule auth-clerk shared quiz videos admin; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^${project}/"; then
              echo "${project//-/_}_changed=true" >> $GITHUB_OUTPUT
              echo "✅ ${project} project has changes"
            else
              echo "${project//-/_}_changed=false" >> $GITHUB_OUTPUT
              echo "➖ ${project} project has no changes"
            fi
          done

          # 依赖关系处理（修正变量名 + admin）
          if [[ "$(cat $GITHUB_OUTPUT | grep -E 'auth_clerk_changed=true|shared_changed=true')" ]]; then
            echo "quiz_changed=true" >> $GITHUB_OUTPUT
            echo "videos_changed=true" >> $GITHUB_OUTPUT
            echo "admin_changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Dependencies changed, forcing Quiz, Videos and Admin rebuild"
          fi

          # 检测根目录文件变化
          if git diff --name-only HEAD~1 HEAD | grep -E '^(index\.html|games/)'; then
            echo "root_files_changed=true" >> $GITHUB_OUTPUT
            echo "✅ Root files or games directory has changes"
          else
            echo "root_files_changed=false" >> $GITHUB_OUTPUT
            echo "➖ Root files have no changes"
          fi

          # 检测强制部署
          if [[ "${{ github.event.forced }}" == "true" ]] || [[ $(git rev-list --count HEAD) -le 1 ]] || [[ ! $(git diff --name-only HEAD~1 HEAD) ]]; then
            echo "force_deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 Force deploy mode - will deploy all projects"
          else
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi

      # 5. 部署 Schedule 项目（静态文件 + 环境变量）
      - name: Deploy Schedule
        if: steps.changes.outputs.schedule_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        env:
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          CLERK_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
        run: |
          echo "🚀 Deploying Schedule to /schedule path..."

          # 处理环境变量替换
          if [ -f "./schedule/index.html" ]; then
            echo "🔧 Processing schedule HTML files for environment variables..."
            envsubst < "./schedule/index.html" > "./schedule/index.html.tmp" && mv "./schedule/index.html.tmp" "./schedule/index.html"
            echo "✅ Environment variables processed"
          fi

          aws s3 sync ./schedule/ s3://damonxuda-projects/schedule/ \
            --delete \
            --exclude "*.md" \
            --exclude "README*" \
            --exclude "LICENSE*" \
            --exclude "package*.json" \
            --exclude "*.config.js" \
            --exclude "*.config.json" \
            --exclude ".gitignore" \
            --exclude ".eslintrc*" \
            --exclude ".prettierrc*"
          echo "✅ Schedule deployed to /schedule path"
          echo "📁 Schedule: https://damonxuda.site/schedule/"

      # 6. 构建并部署 Quiz 项目（React应用）
      - name: Install Quiz Dependencies
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "📦 Installing Quiz dependencies..."
          if [ -d "./quiz" ]; then
            cd quiz && npm ci
            cd ../auth-clerk && npm ci
            echo "✅ Quiz dependencies installed"
          else
            echo "⚠️ Quiz directory not found"
          fi

      - name: Build Quiz Application
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./quiz
        run: |
          echo "🔧 Setting environment variables..."
          echo "REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}" >> .env.production
          echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}" >> .env.production
          echo "REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}" >> .env.production
          echo "REACT_APP_ADMIN_EMAILS=${{ secrets.REACT_APP_ADMIN_EMAILS }}" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production

          echo "🏗️ Building React application..."
          npm run build

      - name: Deploy Quiz to S3
        if: steps.changes.outputs.quiz_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "☁️ Deploying Quiz to S3..."
          aws s3 rm s3://damonxuda-projects/quiz/ --recursive
          aws s3 sync ./quiz/build/ s3://damonxuda-projects/quiz/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude ".DS_Store"
          echo "✅ Quiz deployed"
          echo "📁 Quiz: https://damonxuda.site/quiz/"

      # 7. 构建并部署 Videos 项目（修正为React项目）
      - name: Install Videos Dependencies
        if: steps.changes.outputs.videos_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "📦 Installing Videos dependencies..."
          if [ -d "./videos" ]; then
            cd videos && npm ci
            cd ../auth-clerk && npm ci
            echo "✅ Videos dependencies installed"
          else
            echo "⚠️ Videos directory not found"
          fi

      - name: Build Videos Application
        if: steps.changes.outputs.videos_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./videos
        env:
          REACT_APP_CLERK_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
          REACT_APP_ADMIN_EMAILS: ${{ secrets.REACT_APP_ADMIN_EMAILS }}
          # 新的5函数架构 - 专门化Lambda函数
          REACT_APP_FILE_MANAGEMENT_API_URL: ${{ secrets.REACT_APP_FILE_MANAGEMENT_API_URL }}
          REACT_APP_THUMBNAIL_GENERATOR_API_URL: ${{ secrets.REACT_APP_THUMBNAIL_GENERATOR_API_URL }}
          REACT_APP_FORMAT_CONVERTER_API_URL: ${{ secrets.REACT_APP_FORMAT_CONVERTER_API_URL }}
          REACT_APP_VIDEO_PLAYER_API_URL: ${{ secrets.REACT_APP_VIDEO_PLAYER_API_URL }}
          REACT_APP_YOUTUBE_MANAGER_API_URL: ${{ secrets.REACT_APP_YOUTUBE_MANAGER_API_URL }}
          REACT_APP_SUBTITLE_API_URL: ${{ secrets.REACT_APP_SUBTITLE_API_URL }}
          # 旧的3函数架构 - 向后兼容
          REACT_APP_VIDEO_CORE_API_URL: ${{ secrets.REACT_APP_VIDEO_CORE_API_URL }}
          REACT_APP_VIDEO_PROCESSING_API_URL: ${{ secrets.REACT_APP_VIDEO_PROCESSING_API_URL }}
          REACT_APP_YOUTUBE_API_URL: ${{ secrets.REACT_APP_YOUTUBE_API_URL }}
          REACT_APP_VIDEO_API_URL: ${{ secrets.REACT_APP_VIDEO_CORE_API_URL }}
          REACT_APP_USER_MANAGEMENT_API_URL: ${{ secrets.REACT_APP_USER_MANAGEMENT_API_URL }}
          GENERATE_SOURCEMAP: false
        run: |
          echo "🏗️ Building Videos React application..."
          npm run build

      - name: Deploy Videos to S3
        if: steps.changes.outputs.videos_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "☁️ Deploying Videos to damonxuda-projects bucket..."
          aws s3 rm s3://damonxuda-projects/videos/ --recursive
          aws s3 sync ./videos/build/ s3://damonxuda-projects/videos/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude ".DS_Store"
          echo "✅ Videos deployed to damonxuda-projects bucket"
          echo "📁 Videos: https://damonxuda.site/videos/"

      # 8. 构建并部署 Admin 项目
      - name: Install Admin Dependencies
        if: steps.changes.outputs.admin_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "📦 Installing Admin dependencies..."
          if [ -d "./admin" ]; then
            cd admin && npm ci
            cd ../auth-clerk && npm ci
            echo "✅ Admin dependencies installed"
          else
            echo "⚠️ Admin directory not found"
          fi

      - name: Build Admin Application
        if: steps.changes.outputs.admin_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        working-directory: ./admin
        env:
          CI: false
        run: |
          echo "🔧 Setting environment variables..."
          echo "REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}" >> .env.production
          # 微服务架构 - 多个Lambda URL
          echo "REACT_APP_VIDEO_CORE_API_URL=${{ secrets.REACT_APP_VIDEO_CORE_API_URL }}" >> .env.production
          echo "REACT_APP_VIDEO_PROCESSING_API_URL=${{ secrets.REACT_APP_VIDEO_PROCESSING_API_URL }}" >> .env.production
          echo "REACT_APP_YOUTUBE_API_URL=${{ secrets.REACT_APP_YOUTUBE_API_URL }}" >> .env.production
          # 向后兼容 - 默认使用video-core
          echo "REACT_APP_VIDEO_API_URL=${{ secrets.REACT_APP_VIDEO_CORE_API_URL }}" >> .env.production
          echo "REACT_APP_USER_MANAGEMENT_API_URL=${{ secrets.REACT_APP_USER_MANAGEMENT_API_URL }}" >> .env.production
          echo "REACT_APP_ADMIN_EMAILS=${{ secrets.REACT_APP_ADMIN_EMAILS }}" >> .env.production
          echo "GENERATE_SOURCEMAP=false" >> .env.production

          echo "🏗️ Building Admin React application..."
          npm run build

      - name: Deploy Admin to S3
        if: steps.changes.outputs.admin_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        run: |
          echo "☁️ Deploying Admin to S3..."
          aws s3 rm s3://damonxuda-projects/admin/ --recursive
          aws s3 sync ./admin/build/ s3://damonxuda-projects/admin/ \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude ".DS_Store"
          echo "✅ Admin deployed"
          echo "📁 Admin: https://damonxuda.site/admin/"

      # 9. 验证部署和Clerk认证
      - name: Verify Clerk Authentication Setup
        run: |
          echo "🔐 === Clerk认证系统验证 ==="
          echo ""
          echo "🔍 1. 检查 S3 上的 quiz 文件:"
          aws s3 ls s3://damonxuda-projects/quiz/ --recursive --summarize || echo "Quiz files not found"
          echo ""
          echo "🔍 2. 检查 Videos 文件:"
          aws s3 ls s3://damonxuda-projects/videos/ --recursive || echo "Videos files not found"
          echo ""
          echo "🔍 3. 检查 Admin 文件:"
          aws s3 ls s3://damonxuda-projects/admin/ --recursive || echo "Admin files not found"

      # 10. 部署根目录文件和games目录
      - name: Deploy root files
        if: steps.changes.outputs.root_files_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        env:
          CLERK_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
        run: |
          echo "🚀 Deploying root directory files..."
          if [ -f "./index.html" ]; then
            echo "🔧 Replacing environment variables in index.html..."
            envsubst < ./index.html > ./index.html.tmp && mv ./index.html.tmp ./index.html
            aws s3 cp ./index.html s3://damonxuda-projects/index.html
            echo "✅ Root index.html deployed with environment variables"
          else
            echo "ℹ️ No root index.html found"
          fi
          
          # 部署favicon文件
          if [ -f "./favicon.svg" ]; then
            aws s3 cp ./favicon.svg s3://damonxuda-projects/favicon.svg
            echo "✅ favicon.svg deployed"
          else
            echo "ℹ️ No favicon.svg found"
          fi
          
          if [ -f "./favicon.ico" ]; then
            aws s3 cp ./favicon.ico s3://damonxuda-projects/favicon.ico
            echo "✅ favicon.ico deployed"
          else
            echo "ℹ️ No favicon.ico found"
          fi
          
          if [ -d "./games" ]; then
            echo "🎮 Deploying games directory..."

            # 为games目录中的HTML文件替换环境变量
            echo "🔧 Processing games HTML files for environment variables..."
            find ./games -name "*.html" -type f | while read file; do
              echo "Processing: $file"
              envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            done

            # 部署HTML文件（不缓存）
            echo "📤 Deploying HTML files with no-cache headers..."
            find ./games -name "*.html" -type f | while read file; do
              s3_path="s3://damonxuda-projects/${file#./}"
              aws s3 cp "$file" "$s3_path" \
                --cache-control "no-cache, no-store, must-revalidate" \
                --metadata-directive REPLACE
            done

            # 部署其他文件（正常缓存）
            echo "📤 Deploying other files..."
            aws s3 sync ./games/ s3://damonxuda-projects/games/ \
              --delete \
              --exclude "*.html" \
              --exclude ".DS_Store"
            echo "✅ Games directory deployed with environment variables"
          else
            echo "ℹ️ No games directory found"
          fi

      # 11. CloudFront 缓存清除（仅 /schedule 和 /games）
      - name: Invalidate CloudFront Cache
        if: steps.changes.outputs.schedule_changed == 'true' || steps.changes.outputs.root_files_changed == 'true' || steps.changes.outputs.force_deploy == 'true'
        env:
          CLOUDFRONT_DISTRIBUTION_ID: E3JLLPNZWYQBZQ
        run: |
          echo "🔄 清除 CloudFront 缓存..."

          PATHS=""

          # 检查 schedule 是否变化
          if [[ "${{ steps.changes.outputs.schedule_changed }}" == "true" ]] || [[ "${{ steps.changes.outputs.force_deploy }}" == "true" ]]; then
            PATHS="$PATHS /schedule/*"
            echo "  ✅ 将清除 /schedule/* 缓存"
          fi

          # 检查 games 是否变化（包含在 root_files_changed 中）
          if [[ "${{ steps.changes.outputs.root_files_changed }}" == "true" ]] || [[ "${{ steps.changes.outputs.force_deploy }}" == "true" ]]; then
            # 使用更宽松的检查：只要 root_files_changed 就清除 games
            PATHS="$PATHS /games/*"
            echo "  ✅ 将清除 /games/* 缓存"
          fi

          # 如果有需要清除的路径，创建 invalidation
          if [ -n "$PATHS" ]; then
            echo "🚀 创建 CloudFront invalidation..."
            echo "📋 清除路径: $PATHS"
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths $PATHS
            echo "✅ CloudFront 缓存清除请求已提交"
            echo "⏳ 注意：CloudFront invalidation 可能需要几分钟生效"
          else
            echo "ℹ️ 无需清除缓存"
          fi

      # 12. 验证所有部署结果
      - name: Verify all deployments
        run: |
          echo "📁 验证所有项目部署..."

          echo "=== Schedule ==="
          aws s3 ls s3://damonxuda-projects/schedule/ --recursive | head -3 || echo "❌ Schedule not found"

          echo "=== Quiz ==="
          aws s3 ls s3://damonxuda-projects/quiz/ --recursive | head -3 || echo "❌ Quiz not found"

          echo "=== Videos ==="
          aws s3 ls s3://damonxuda-projects/videos/ --recursive | head -3 || echo "❌ Videos not found"

          echo "=== Admin ==="
          aws s3 ls s3://damonxuda-projects/admin/ --recursive | head -3 || echo "❌ Admin not found"

      # 13. 部署成功报告
      - name: Deploy Success Report
        run: |
          echo "🎉 多项目部署完成!"
          echo ""
          echo "📊 本次部署摘要:"
          echo "   Schedule: ${{ steps.changes.outputs.schedule_changed }}"
          echo "   Auth-clerk: ${{ steps.changes.outputs.auth_clerk_changed }}"
          echo "   Shared: ${{ steps.changes.outputs.shared_changed }}"
          echo "   Quiz: ${{ steps.changes.outputs.quiz_changed }}"
          echo "   Videos: ${{ steps.changes.outputs.videos_changed }}"
          echo "   Admin: ${{ steps.changes.outputs.admin_changed }}"
          echo "   强制部署: ${{ steps.changes.outputs.force_deploy }}"
          echo ""
          echo "🌐 项目访问地址:"
          echo "   📚 Schedule: https://damonxuda.site/schedule/"
          echo "   🧠 Quiz: https://damonxuda.site/quiz/"
          echo "   🎬 Videos: https://damonxuda.site/videos/"
          echo "   🛡️ Admin: https://damonxuda.site/admin/"
          echo ""
          echo "✅ 部署完成！所有项目现已部署到 damonxuda-projects bucket!"
