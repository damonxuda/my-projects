# .github/workflows/deploy-lambda.yml
name: Deploy Lambda Functions

# ⚠️ 重要：所有Lambda函数已配置Lambda Layer用于依赖管理
# Lambda Layer ARN: arn:aws:lambda:ap-northeast-1:905418159488:layer:video-management-dependencies:1
# 部署时只打包代码文件（index.mjs + shared/），不打包node_modules

on:
  push:
    branches: [main]
    paths:
      - 'backend/lambda-video-management/**'
      - 'backend/lambda-user-management/**'
      - 'lambda-subtitle/**'
      - '.github/workflows/deploy-lambda.yml'  # workflow 自身修改也触发
  workflow_dispatch: # 允许手动触发

jobs:
  deploy-video-management:
    runs-on: ubuntu-latest
    # 只在 lambda-video-management 改变时运行
    if: |
      contains(github.event.head_commit.added, 'backend/lambda-video-management') ||
      contains(github.event.head_commit.modified, 'backend/lambda-video-management') ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service:
          - name: FILE_MANAGEMENT_LAMBDA
            path: services/file-management
          - name: VIDEO_PLAYER_LAMBDA
            path: services/video-player
          - name: YOUTUBE_MANAGER_LAMBDA
            path: services/youtube-manager
          - name: FORMAT_CONVERTER_LAMBDA
            path: services/format-converter
          - name: THUMBNAIL_GENERATOR_LAMBDA
            path: services/thumbnail-generator
          - name: SUBTITLE_MANAGER_LAMBDA
            path: services/subtitle-manager

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package (code only, no node_modules)
        working-directory: ./backend/lambda-video-management/${{ matrix.service.path }}
        run: |
          echo "📦 Creating deployment package for ${{ matrix.service.name }}..."
          echo "⚠️  Using Lambda Layer for dependencies - NOT including node_modules"

          # 只打包代码文件
          zip -r function.zip index.mjs shared/ -x "*.DS_Store" "node_modules/*" "*.zip"

          ls -lh function.zip
          echo "✅ Package size: $(ls -lh function.zip | awk '{print $5}')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        working-directory: ./backend/lambda-video-management/${{ matrix.service.path }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="lambda-deploy/${{ matrix.service.name }}-${TIMESTAMP}.zip"

          echo "📤 Uploading to S3: s3://damonxuda-video-files/${S3_KEY}"
          aws s3 cp function.zip s3://damonxuda-video-files/${S3_KEY}

          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      - name: Deploy to Lambda
        run: |
          echo "🚀 Deploying ${{ matrix.service.name }}..."
          echo "📦 Using S3 key: ${{ env.S3_KEY }}"

          # 更新函数代码
          aws lambda update-function-code \
            --function-name ${{ matrix.service.name }} \
            --s3-bucket damonxuda-video-files \
            --s3-key ${{ env.S3_KEY }}

          # 等待函数更新完成
          aws lambda wait function-updated \
            --function-name ${{ matrix.service.name }}

          echo "✅ ${{ matrix.service.name }} deployed successfully!"

  deploy-user-management:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.added, 'backend/lambda-user-management') ||
      contains(github.event.head_commit.modified, 'backend/lambda-user-management') ||
      github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./backend/lambda-user-management
        run: npm ci

      - name: Create deployment package
        working-directory: ./backend/lambda-user-management
        run: |
          echo "📦 Creating User Management Lambda package..."
          mkdir -p deploy
          cp *.mjs deploy/ 2>/dev/null || cp *.js deploy/
          cp package.json deploy/
          cp -r node_modules deploy/
          cd deploy
          zip -r ../lambda-deployment.zip .
          cd ..
          ls -lh lambda-deployment.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Lambda
        working-directory: ./backend/lambda-user-management
        run: |
          echo "🚀 Deploying User Management to Lambda..."

          aws lambda update-function-code \
            --function-name user_management \
            --zip-file fileb://lambda-deployment.zip

          aws lambda wait function-updated \
            --function-name user_management

          echo "✅ User Management Lambda deployed!"
