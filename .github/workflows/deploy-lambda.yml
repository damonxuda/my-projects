# .github/workflows/deploy-lambda.yml
name: Deploy Lambda Functions

# ⚠️ 重要：所有Lambda函数已配置Lambda Layer用于依赖管理
# Lambda Layer ARN: arn:aws:lambda:ap-northeast-1:905418159488:layer:video-management-dependencies:1
# 部署时只打包代码文件（index.mjs + shared/），不打包node_modules

on:
  push:
    branches: [main]
    paths:
      - 'backend/lambda-video-management/**'
      - 'backend/lambda-user-management/**'
      - 'backend/lambda-trading/**'
      - 'lambda-subtitle/**'
      - '.github/workflows/deploy-lambda.yml'  # workflow 自身修改也触发
  workflow_dispatch: # 允许手动触发

jobs:
  deploy-video-management:
    runs-on: ubuntu-latest
    # paths过滤已经在workflow级别生效，不需要额外的if条件

    strategy:
      matrix:
        service:
          - name: FILE_MANAGEMENT_LAMBDA
            path: services/file-management
          - name: VIDEO_PLAYER_LAMBDA
            path: services/video-player
          - name: YOUTUBE_MANAGER_LAMBDA
            path: services/youtube-manager
          - name: FORMAT_CONVERTER_LAMBDA
            path: services/format-converter
          - name: THUMBNAIL_GENERATOR_LAMBDA
            path: services/thumbnail-generator
          - name: SUBTITLE_MANAGER_LAMBDA
            path: services/subtitle-manager

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package (code only, no node_modules)
        working-directory: ./backend/lambda-video-management/${{ matrix.service.path }}
        run: |
          echo "📦 Creating deployment package for ${{ matrix.service.name }}..."
          echo "⚠️  Using Lambda Layer for dependencies - NOT including node_modules"

          # 打包代码文件（index.mjs必须，shared/和lib/如果存在就包含）
          if [ -d "lib" ] && [ -d "shared" ]; then
            zip -r function.zip index.mjs shared/ lib/ -x "*.DS_Store" "node_modules/*" "*.zip"
          elif [ -d "shared" ]; then
            zip -r function.zip index.mjs shared/ -x "*.DS_Store" "node_modules/*" "*.zip"
          elif [ -d "lib" ]; then
            zip -r function.zip index.mjs lib/ -x "*.DS_Store" "node_modules/*" "*.zip"
          else
            zip -r function.zip index.mjs -x "*.DS_Store" "*.zip"
          fi

          ls -lh function.zip
          echo "✅ Package size: $(ls -lh function.zip | awk '{print $5}')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        working-directory: ./backend/lambda-video-management/${{ matrix.service.path }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="lambda-deploy/${{ matrix.service.name }}-${TIMESTAMP}.zip"

          echo "📤 Uploading to S3: s3://damonxuda-video-files/${S3_KEY}"
          aws s3 cp function.zip s3://damonxuda-video-files/${S3_KEY}

          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      - name: Deploy to Lambda
        run: |
          echo "🚀 Deploying ${{ matrix.service.name }}..."
          echo "📦 Using S3 key: ${{ env.S3_KEY }}"

          # 更新函数代码
          aws lambda update-function-code \
            --function-name ${{ matrix.service.name }} \
            --s3-bucket damonxuda-video-files \
            --s3-key ${{ env.S3_KEY }}

          # 等待函数更新完成
          aws lambda wait function-updated \
            --function-name ${{ matrix.service.name }}

          echo "✅ ${{ matrix.service.name }} deployed successfully!"

  deploy-user-management:
    runs-on: ubuntu-latest
    # user-management只有单个文件，无需依赖安装

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        working-directory: ./backend/lambda-user-management
        run: |
          echo "📦 Creating User Management Lambda package..."
          echo "ℹ️  This Lambda has no dependencies, packaging code only"

          # 只打包代码文件
          zip -r function.zip *.mjs -x "*.DS_Store"

          ls -lh function.zip
          echo "✅ Package size: $(ls -lh function.zip | awk '{print $5}')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        working-directory: ./backend/lambda-user-management
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="lambda-deploy/user_management-${TIMESTAMP}.zip"

          echo "📤 Uploading to S3: s3://damonxuda-video-files/${S3_KEY}"
          aws s3 cp function.zip s3://damonxuda-video-files/${S3_KEY}

          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      - name: Deploy to Lambda
        run: |
          echo "🚀 Deploying user_management..."
          echo "📦 Using S3 key: ${{ env.S3_KEY }}"

          aws lambda update-function-code \
            --function-name user_management \
            --s3-bucket damonxuda-video-files \
            --s3-key ${{ env.S3_KEY }}

          aws lambda wait function-updated \
            --function-name user_management

          echo "✅ user_management deployed successfully!"

  deploy-trading:
    runs-on: ubuntu-latest
    # Trading lambda 使用 Lambda Layer 管理依赖

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create Lambda Layer with dependencies
        working-directory: ./backend/lambda-trading
        run: |
          echo "📦 Creating Lambda Layer with dependencies..."

          # 创建Layer目录结构
          mkdir -p layer/nodejs

          # 安装依赖到Layer
          cp package.json layer/nodejs/
          cd layer/nodejs
          npm install --production
          cd ../..

          # 打包Layer
          cd layer
          zip -r ../layer.zip nodejs
          cd ..

          ls -lh layer.zip
          echo "✅ Layer size: $(ls -lh layer.zip | awk '{print $5}')"

      - name: Create deployment package (code only, no node_modules)
        working-directory: ./backend/lambda-trading
        run: |
          echo "📦 Creating Trading Lambda package..."
          echo "⚠️  Using Lambda Layer for dependencies - NOT including node_modules"

          # 只打包代码文件
          zip -r function.zip index.mjs -x "*.DS_Store" "node_modules/*" "*.zip"

          ls -lh function.zip
          echo "✅ Package size: $(ls -lh function.zip | awk '{print $5}')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Publish Lambda Layer
        working-directory: ./backend/lambda-trading
        run: |
          echo "📤 Publishing Lambda Layer..."

          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name trading-dependencies \
            --description "Dependencies for Trading Lambda (包含 yahoo-finance2)" \
            --zip-file fileb://layer.zip \
            --compatible-runtimes nodejs20.x \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Version' \
            --output text)

          echo "✅ Published Layer version: ${LAYER_VERSION}"
          echo "LAYER_VERSION=${LAYER_VERSION}" >> $GITHUB_ENV

      - name: Upload to S3
        working-directory: ./backend/lambda-trading
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="lambda-deploy/TRADING_LAMBDA-${TIMESTAMP}.zip"

          echo "📤 Uploading to S3: s3://damonxuda-video-files/${S3_KEY}"
          aws s3 cp function.zip s3://damonxuda-video-files/${S3_KEY}

          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV

      - name: Deploy to Lambda
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "🚀 Deploying TRADING_LAMBDA..."
          echo "📦 Using S3 key: ${{ env.S3_KEY }}"

          # 更新函数代码
          aws lambda update-function-code \
            --function-name TRADING_LAMBDA \
            --s3-bucket damonxuda-video-files \
            --s3-key ${{ env.S3_KEY }}

          # 等待函数更新完成
          aws lambda wait function-updated \
            --function-name TRADING_LAMBDA

          # 更新Lambda Layer到最新版本
          echo "🔗 Updating Lambda Layer to version ${LAYER_VERSION}..."
          LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:730335478220:layer:trading-dependencies:${LAYER_VERSION}"

          aws lambda update-function-configuration \
            --function-name TRADING_LAMBDA \
            --layers "${LAYER_ARN}" \
            --environment "Variables={GEMINI_API_KEY=${GEMINI_API_KEY},CLAUDE_API_KEY=${CLAUDE_API_KEY},GROK_API_KEY=${GROK_API_KEY},OPENAI_API_KEY=${OPENAI_API_KEY},SUPABASE_URL=${SUPABASE_URL},SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}}"

          # 等待配置更新完成
          aws lambda wait function-updated \
            --function-name TRADING_LAMBDA

          # 🚫 定时触发已禁用（等调试完成后再启用）
          # echo "⏰ Updating EventBridge schedule rule..."
          # aws events put-rule ...

          echo "✅ TRADING_LAMBDA deployed successfully!"
          echo "⚠️  定时触发已禁用，需要手动invoke测试"
