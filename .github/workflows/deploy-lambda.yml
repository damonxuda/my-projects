# .github/workflows/deploy-lambda.yml
name: Deploy Video Management Lambda Services

on:
  push:
    branches: [main]
    paths:
      - 'lambda-video-management/services/**'
  workflow_dispatch: # 允许手动触发
    inputs:
      deploy_all:
        description: 'Deploy all services'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy-lambdas:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            lambda-video-management/services/video-core/package-lock.json
            lambda-video-management/services/video-processing/package-lock.json
            lambda-video-management/services/youtube/package-lock.json

      # 3. 配置 AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. 检测Lambda服务变化
      - name: Detect Lambda service changes
        id: lambda_changes
        working-directory: ./lambda-video-management
        run: |
          echo "🔍 检测Lambda服务变化..."

          # 检测每个Lambda服务的变化
          for service in video-core video-processing youtube; do
            if git diff --name-only HEAD~1 HEAD | grep -q "lambda-video-management/services/${service}/"; then
              echo "${service//-/_}_changed=true" >> $GITHUB_OUTPUT
              echo "✅ ${service} service has changes"
            else
              echo "${service//-/_}_changed=false" >> $GITHUB_OUTPUT
              echo "➖ ${service} service has no changes"
            fi
          done

          # 检测共享模块变化
          if git diff --name-only HEAD~1 HEAD | grep -q "lambda-video-management/services/shared/"; then
            echo "shared_changed=true" >> $GITHUB_OUTPUT
            echo "video_core_changed=true" >> $GITHUB_OUTPUT
            echo "video_processing_changed=true" >> $GITHUB_OUTPUT
            echo "youtube_changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Shared modules changed, forcing all services rebuild"
          else
            echo "shared_changed=false" >> $GITHUB_OUTPUT
          fi

          # 强制部署所有服务
          if [[ "${{ github.event.inputs.deploy_all }}" == "true" ]]; then
            echo "video_core_changed=true" >> $GITHUB_OUTPUT
            echo "video_processing_changed=true" >> $GITHUB_OUTPUT
            echo "youtube_changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Force deploy all Lambda services"
          fi

      # 5. 部署 video-core-lambda
      - name: Deploy video-core-lambda
        if: steps.lambda_changes.outputs.video_core_changed == 'true'
        working-directory: ./lambda-video-management/services/video-core
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          ADMIN_EMAILS: "damon.xu@gmail.com"
          VIDEO_BUCKET_NAME: "damonxuda-video-files"
        run: |
          echo "🚀 Deploying video-core-lambda..."
          npm ci
          chmod +x deploy.sh
          ./deploy.sh
          echo "✅ video-core-lambda deployed successfully"

      # 6. 部署 video-processing-lambda
      - name: Deploy video-processing-lambda
        if: steps.lambda_changes.outputs.video_processing_changed == 'true'
        working-directory: ./lambda-video-management/services/video-processing
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          ADMIN_EMAILS: "damon.xu@gmail.com"
          VIDEO_BUCKET_NAME: "damonxuda-video-files"
          MEDIACONVERT_ROLE_ARN: ${{ secrets.MEDIACONVERT_ROLE_ARN }}
          MEDIACONVERT_QUEUE_ARN: ${{ secrets.MEDIACONVERT_QUEUE_ARN }}
        run: |
          echo "🚀 Deploying video-processing-lambda..."
          npm ci
          chmod +x deploy.sh
          ./deploy.sh
          echo "✅ video-processing-lambda deployed successfully"

      # 7. 部署 youtube-lambda (简化版本)
      - name: Deploy youtube-lambda
        if: steps.lambda_changes.outputs.youtube_changed == 'true'
        working-directory: ./lambda-video-management/services/youtube
        env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          ADMIN_EMAILS: "damon.xu@gmail.com"
          VIDEO_BUCKET_NAME: "damonxuda-video-files"
        run: |
          echo "🚀 Deploying youtube-lambda..."
          npm ci
          chmod +x deploy.sh
          ./deploy.sh
          echo "✅ youtube-lambda deployed successfully"

      # 8. 获取Lambda函数URLs
      - name: Get Lambda Function URLs
        run: |
          echo "📋 Lambda Function URLs:"
          echo "=========================="

          # 获取video-core URL
          VIDEO_CORE_URL=$(aws lambda get-function-url-config --function-name video-core-lambda --query 'FunctionUrl' --output text 2>/dev/null || echo "Not configured")
          echo "🎬 Video Core API: $VIDEO_CORE_URL"

          # 获取video-processing URL
          VIDEO_PROCESSING_URL=$(aws lambda get-function-url-config --function-name video-processing-lambda --query 'FunctionUrl' --output text 2>/dev/null || echo "Not configured")
          echo "⚙️ Video Processing API: $VIDEO_PROCESSING_URL"

          # 获取youtube URL
          YOUTUBE_URL=$(aws lambda get-function-url-config --function-name youtube-lambda --query 'FunctionUrl' --output text 2>/dev/null || echo "Not configured")
          echo "📺 YouTube API: $YOUTUBE_URL"

          echo ""
          echo "💡 Next steps:"
          echo "1. Update frontend environment variables with these URLs"
          echo "2. Test the new Lambda functions"
          echo "3. Update API calls in the frontend React app"

      # 9. 部署成功报告
      - name: Lambda Deploy Success Report
        run: |
          echo "🎉 Lambda服务部署完成!"
          echo ""
          echo "📊 本次部署摘要:"
          echo "   Video Core: ${{ steps.lambda_changes.outputs.video_core_changed }}"
          echo "   Video Processing: ${{ steps.lambda_changes.outputs.video_processing_changed }}"
          echo "   YouTube: ${{ steps.lambda_changes.outputs.youtube_changed }}"
          echo "   Shared modules: ${{ steps.lambda_changes.outputs.shared_changed }}"
          echo ""
          echo "✅ 所有Lambda服务部署完成！"