import { Clerk } from '@clerk/backend';

// 创建Clerk客户端实例
const clerkClient = new Clerk({
  secretKey: process.env.CLERK_SECRET_KEY
});

// 缓存验证结果，避免重复调用
const tokenCache = new Map();
const CACHE_DURATION = 40 * 1000; // 40秒，与原函数保持一致

export async function verifyTokenAndCheckAccess(token) {
  try {
    console.log("--- 开始验证Token ---");

    // 检查缓存
    const cached = tokenCache.get(token);
    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
      console.log("使用缓存的Token验证结果");
      return cached.user;
    }

    console.log("步骤1: 验证token...");
    const sessionToken = await Promise.race([
      clerkClient.verifyToken(token),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Token verification timeout")), 10000)
      ),
    ]);
    console.log("Token验证成功, sessionToken.sub:", sessionToken.sub);

    console.log("步骤2: 获取用户信息...");
    const user = await Promise.race([
      clerkClient.users.getUser(sessionToken.sub),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Get user timeout")), 10000)
      ),
    ]);
    console.log("获取用户成功:", {
      id: user.id,
      emailAddress: user.emailAddresses?.[0]?.emailAddress,
      metadataKeys: Object.keys(user.publicMetadata || {}),
    });

    console.log("步骤3: 检查用户权限...");
    const authorizedModules = user.publicMetadata?.authorized_modules || [];
    const status = user.publicMetadata?.status;

    console.log("用户权限检查:");
    console.log("- authorized_modules:", JSON.stringify(authorizedModules));
    console.log("- status:", status);
    console.log("- 是否包含videos权限:", authorizedModules.includes("videos"));
    console.log("- 状态是否approved:", status === "approved");

    const hasAccess =
      authorizedModules.includes("videos") && status === "approved";

    console.log("最终权限结果:", hasAccess ? "有权限" : "无权限");

    // 如果验证成功，缓存结果
    if (hasAccess) {
      tokenCache.set(token, {
        user: user,
        timestamp: Date.now()
      });
      console.log("Token验证结果已缓存");
    }

    return hasAccess ? user : null;
  } catch (error) {
    console.error("Token verification failed:", error);
    console.error("错误类型:", error.name);
    console.error("错误消息:", error.message);

    if (error.message.includes("timeout")) {
      console.error("请求超时 - 可能需要增加Lambda超时时间");
    }

    return null;
  }
}

// 获取用户有权限访问的文件夹列表
export async function getUserAccessibleFolders(user) {
  try {
    // 检查用户是否是管理员
    const adminEmails = (process.env.ADMIN_EMAILS || "").split(",").map(email => email.trim());
    const isAdmin = adminEmails.includes(user.emailAddresses?.[0]?.emailAddress);

    // 获取所有文件夹列表
    const { ListObjectsV2Command } = await import("@aws-sdk/client-s3");
    const { s3Client, VIDEO_BUCKET } = await import("./s3-config.mjs");

    const listCommand = new ListObjectsV2Command({
      Bucket: VIDEO_BUCKET,
      Prefix: "videos/",
      Delimiter: "/",
      MaxKeys: 100
    });

    const response = await s3Client.send(listCommand);
    const allFolders = [];

    if (response.CommonPrefixes) {
      response.CommonPrefixes.forEach(prefix => {
        const folderName = prefix.Prefix.replace("videos/", "").replace("/", "");
        if (folderName) {
          allFolders.push(folderName);
        }
      });
    }

    if (isAdmin) {
      // 管理员可以访问所有文件夹（包括 Movies）
      console.log("管理员用户，可访问所有文件夹:", allFolders);
      return allFolders;
    } else {
      // 普通用户可以访问除 Movies 以外的所有文件夹
      const accessibleFolders = allFolders.filter(folder => folder !== "Movies");
      console.log("普通用户，可访问的文件夹:", accessibleFolders);
      return accessibleFolders;
    }
  } catch (error) {
    console.error("获取用户可访问文件夹失败:", error);
    return []; // 出错时返回空数组，安全起见
  }
}

// 检查用户是否是管理员
export function isAdmin(user) {
  const adminEmails = (process.env.ADMIN_EMAILS || "").split(",").map(email => email.trim());
  return adminEmails.includes(user.emailAddresses?.[0]?.emailAddress);
}